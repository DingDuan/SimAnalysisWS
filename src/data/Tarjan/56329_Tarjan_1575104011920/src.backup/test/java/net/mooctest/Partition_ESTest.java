/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:12:25 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import net.mooctest.Partition;
import org.junit.runner.RunWith;

public class Partition_ESTest {

    @Test(timeout = 1000)
    public void test3715d4fa_2c84_4806_bdba_71a0cf1fd29100()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add("5");
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains("5"));

        boolean boolean1 = linkedList0.add("");
        assertEquals(2, linkedList0.size());
        assertTrue(boolean1 == boolean0);
        assertTrue(boolean1);
        assertTrue(linkedList0.contains("5"));

        boolean boolean2 = linkedList0.add("com.google.common.collect.UnmodifiableIterator");
        assertEquals(3, linkedList0.size());
        assertTrue(boolean2 == boolean1);
        assertTrue(boolean2 == boolean0);
        assertTrue(boolean2);
        assertTrue(linkedList0.contains("5"));

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(3, linkedList0.size());
        assertNotNull(partition0);
        assertTrue(linkedList0.contains("5"));

        String string0 = partition0.merge("5", "com.google.common.collect.UnmodifiableIterator");
        assertEquals(3, linkedList0.size());
        assertEquals("5", string0);
        assertNotNull(string0);
        assertTrue(linkedList0.contains("5"));

        String string1 = partition0.merge("com.google.common.collect.UnmodifiableIterator", "");
        assertEquals(3, linkedList0.size());
        assertEquals("5", string1);
        assertNotNull(string1);
        assertTrue(linkedList0.contains("5"));
    }

    @Test(timeout = 1000)
    public void testa442063e_df08_45c6_9ede_9338b741bf5f01()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add("");
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(""));

        boolean boolean1 = linkedList0.add("net.mooctest.Partition");
        assertEquals(2, linkedList0.size());
        assertTrue(boolean1 == boolean0);
        assertTrue(boolean1);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(2, linkedList0.size());
        assertNotNull(partition0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        String string0 = partition0.merge("net.mooctest.Partition", "");
        assertEquals(2, linkedList0.size());
        assertEquals("net.mooctest.Partition", string0);
        assertNotNull(string0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        String string1 = partition0.merge("", "");
        assertEquals(2, linkedList0.size());
        assertEquals("net.mooctest.Partition", string1);
        assertNotNull(string1);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));
    }

    @Test(timeout = 1000)
    public void testf0a0fe72_b30c_4852_b9cd_4274ba95d53d02()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add("");
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(""));

        boolean boolean1 = linkedList0.add("net.mooctest.Partition");
        assertEquals(2, linkedList0.size());
        assertTrue(boolean1 == boolean0);
        assertTrue(boolean1);
        assertTrue(linkedList0.contains(""));

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(2, linkedList0.size());
        assertNotNull(partition0);
        assertTrue(linkedList0.contains(""));

        String string0 = partition0.merge("net.mooctest.Partition", "");
        assertEquals(2, linkedList0.size());
        assertEquals("net.mooctest.Partition", string0);
        assertNotNull(string0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        boolean boolean2 = partition0.sameComponent("", "");
        assertEquals(2, linkedList0.size());
        assertTrue(boolean2 == boolean0);
        assertTrue(boolean2 == boolean1);
        assertTrue(boolean2);
        assertTrue(linkedList0.contains(string0));
    }

    @Test(timeout = 1000)
    public void testb619e38c_b650_4ee8_8544_2234462c475403()  throws Throwable  {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        List<Object> list0 = linkedList0.subList(0, 0);
        assertEquals(0, linkedList0.size());
        assertEquals(0, list0.size());
        assertTrue(list0.isEmpty());
        assertNotNull(list0);
        assertFalse(linkedList0.contains(0));
        assertFalse(list0.contains(0));

        Object object0 = new Object();
        assertNotNull(object0);

        boolean boolean0 = linkedList0.add(object0);
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertFalse(linkedList0.contains(0));
        assertTrue(linkedList0.contains(object0));

        // Undeclared exception!
        try {
            Partition.singletons((Collection<Object>) list0);

        } catch(ConcurrentModificationException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertTrue(e instanceof ConcurrentModificationException);
        }
    }

    @Test(timeout = 1000)
    public void testcd1c2814_280c_49cc_92da_38606643f35504()  throws Throwable  {
        LinkedList<Object> linkedList0 = new LinkedList<Object>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add((Object) linkedList0);
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);

        // Undeclared exception!
        try {
            Partition.singletons((Collection<Object>) linkedList0);

        } catch(StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 1000)
    public void test0a79e0cd_ca97_4605_845e_c78dec26dcf005()  throws Throwable  {
        // Undeclared exception!
        try {
            Partition.singletons((Collection<Integer>) null);

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertTrue(e instanceof NullPointerException);
        }
    }

    @Test(timeout = 1000)
    public void test7d5dd6c8_39f2_45f9_9056_b23c3d506e8e06()  throws Throwable  {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        Integer integer0 = new Integer((-1));
        assertEquals((-1), (int)integer0);
        assertNotNull(integer0);

        Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
        assertEquals(0, linkedList0.size());
        assertNotNull(partition0);
        assertFalse(linkedList0.contains(integer0));

        // Undeclared exception!
        try {
            partition0.sameComponent(integer0, integer0);

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 1000)
    public void test8ee34d2d_c280_433b_9bef_9e38f59c18aa07()  throws Throwable  {
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        Integer integer0 = Integer.getInteger((String) null);
        assertNull(integer0);

        LinkedList<Object> linkedList1 = new LinkedList<Object>();
        assertEquals(0, linkedList1.size());
        assertNotNull(linkedList1);

        Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList1);
        assertEquals(0, linkedList1.size());
        assertNotNull(partition0);

        // Undeclared exception!
        try {
            partition0.merge(linkedList0, integer0);

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 1000)
    public void testd32bdcd4_cf49_4133_9ade_f8725d100dd208()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(0, linkedList0.size());
        assertNotNull(partition0);

        // Undeclared exception!
        try {
            partition0.componentOf("@/s-O7&M%[1=B");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 1000)
    public void testc66a4687_de11_49a4_9434_d001127d4b7e09()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add("");
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains(""));

        boolean boolean1 = linkedList0.add("net.mooctest.Partition");
        assertEquals(2, linkedList0.size());
        assertTrue(boolean1 == boolean0);
        assertTrue(boolean1);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(2, linkedList0.size());
        assertNotNull(partition0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        String string0 = partition0.merge("net.mooctest.Partition", "");
        assertEquals(2, linkedList0.size());
        assertEquals("net.mooctest.Partition", string0);
        assertNotNull(string0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        String string1 = partition0.componentOf("");
        assertEquals(2, linkedList0.size());
        assertEquals("net.mooctest.Partition", string1);
        assertNotNull(string1);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));
    }

    @Test(timeout = 1000)
    public void testf778f7f8_24e1_4eb7_810a_a8e51f0163ff10()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        assertEquals(0, linkedList0.size());
        assertNotNull(linkedList0);

        boolean boolean0 = linkedList0.add("net.mooctest.Partition");
        assertEquals(1, linkedList0.size());
        assertTrue(boolean0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        assertEquals(1, linkedList0.size());
        assertNotNull(partition0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));

        String string0 = partition0.componentOf("net.mooctest.Partition");
        assertEquals(1, linkedList0.size());
        assertEquals("net.mooctest.Partition", string0);
        assertNotNull(string0);
        assertTrue(linkedList0.contains("net.mooctest.Partition"));
    }

    @Test(timeout = 1000)
    public void testd7187690_b4dc_4336_842e_8e7c47512ccd12()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("ZG6");
        linkedList0.add("can't use .skipNulls() with maps");
        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        boolean boolean0 = partition0.sameComponent("can't use .skipNulls() with maps", "ZG6");
        assertFalse(boolean0);
    }

    @Test(timeout = 1000)
    public void test1e96471b_dbb2_4a43_85da_7f3f17d58b1e13()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("");
        linkedList0.add("com.google.comon.collect.UnmodifiableIterator");
        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        String string0 = partition0.merge("com.google.comon.collect.UnmodifiableIterator", "");
        assertEquals("com.google.comon.collect.UnmodifiableIterator", string0);

        String string1 = partition0.merge("com.google.comon.collect.UnmodifiableIterator", "");
        assertEquals("com.google.comon.collect.UnmodifiableIterator", string1);
    }

    @Test(timeout = 1000)
    public void test1b7183e0_747b_4d7c_852e_312b6bb7471e14()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("");
        linkedList0.add("CD");
        linkedList0.add("net.mooctest.Partition");
        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        String string0 = partition0.merge("", "CD");
        assertEquals("", string0);

        String string1 = partition0.merge("net.mooctest.Partition", "CD");
        assertEquals("", string1);
    }

    @Test(timeout = 1000)
    public void testc7d77f9f_4533_4259_a66b_f7411ea6573b15()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
        Set<String> set0 = partition0.getNodes();
        assertTrue(set0.isEmpty());
    }
}
