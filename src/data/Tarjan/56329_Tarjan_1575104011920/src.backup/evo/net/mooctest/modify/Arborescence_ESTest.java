/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:12:14 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import net.mooctest.Arborescence;
import net.mooctest.Edge;
import org.junit.runner.RunWith;

public class Arborescence_ESTest {
 
  @Test(timeout = 1000)
  public void test3f6a0af0_0dbe_4b51_b52b_c2052e87a4c00()  throws Throwable  {
      Arborescence<Object> arborescence0 = Arborescence.empty();
      // Undeclared exception!
      try { 
        ImmutableMap.of(arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0);
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: Arborescence{}
         //
         assertTrue(e instanceof IllegalArgumentException);
      }
  }

  @Test(timeout = 1000)
  public void test0a6c7490_0c6d_4a8d_b8d1_56ab4e3ce6311()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) null);
      Arborescence<Arborescence<String>> arborescence1 = Arborescence.of((ImmutableMap<Arborescence<String>, Arborescence<String>>) null);
      // Undeclared exception!
      try { 
        arborescence1.equals(arborescence0);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertTrue(e instanceof NullPointerException);
      }
  }

  @Test(timeout = 1000)
  public void test24fdfd12_7bb1_4fc7_834a_33598708e23d2()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.of((ImmutableMap<String, String>) null);
      boolean boolean0 = arborescence0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 1000)
  public void test740c0aea_5ea2_45f5_846b_009abcc453253()  throws Throwable  {
      ImmutableSortedMap<Integer, Integer> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) immutableSortedMap0);
      Arborescence<String> arborescence1 = Arborescence.empty();
      boolean boolean0 = arborescence1.equals(arborescence0);
      assertTrue(boolean0);
  }

  @Test(timeout = 1000)
  public void testcf90f1f6_7819_4401_bc95_68490f0156f94()  throws Throwable  {
      ImmutableSortedMap<Integer, Integer> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) immutableSortedMap0);
      Object object0 = new Object();
      boolean boolean0 = arborescence0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 1000)
  public void testb06be9a9_7bb7_497d_ae22_d45b6aa9cb7f5()  throws Throwable  {
      Integer integer0 = new Integer((-5434));
      ImmutableBiMap<Integer, Integer> immutableBiMap0 = ImmutableBiMap.of(integer0, integer0);
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) immutableBiMap0);
      String string0 = arborescence0.toString();
      assertEquals("Arborescence{-5434 -> -5434}", string0);
  }

  @Test(timeout = 1000)
  public void test9d4b8540_d2bc_4cd9_97e5_1481ed1933d86()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      Edge<String> edge0 = new Edge<String>("", "");
      boolean boolean0 = arborescence0.contains(edge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 1000)
  public void teste49b601b_653c_4215_9161_6d0b54f38e8d7()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      arborescence0.hashCode();
  }

  @Test(timeout = 1000)
  public void test039a78a0_1505_49b4_a94c_46696a9944ea8()  throws Throwable  {
      Arborescence<Object> arborescence0 = Arborescence.empty();
      // Undeclared exception!
      try { 
        arborescence0.contains((Edge<Object>) null);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertTrue(e instanceof NullPointerException);
      }
  }
}
