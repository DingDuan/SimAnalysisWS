/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:15:47 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import net.mooctest.FibonacciHeap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FibonacciHeap_ESTest extends FibonacciHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("%A&'=oPL4v,q", "ZW{D0k L/X,.PpQ");
      fibonacciHeap0.add("ZW{D0k L/X,.PpQ", "%A&'=oPL4v,q");
      fibonacciHeap0.add("%A&'=oPL4v,q", "%A&'=oPL4v,q");
      fibonacciHeap0.add("ZW{D0k L/X,.PpQ", "ZW{D0k L/X,.PpQ");
      fibonacciHeap0.add("5q", "com.google.common.collect.Iterators");
      fibonacciHeap0.pollOption();
      assertEquals(4, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "pA&'=oPL4v,q");
      fibonacciHeap0.add("pA&'=oPL4v,q", "ZW{D0k L/X,.PpQ");
      fibonacciHeap0.add("ZW{D0k L/X,.PpQ", "pA&'=oPL4v,q");
      fibonacciHeap0.add("pA&'=oPL4v,q", "pA&'=oPL4v,q");
      fibonacciHeap0.add("ZW{D0k L/X,.PpQ", "ZW{D0k L/X,.PpQ");
      fibonacciHeap0.pollOption();
      assertEquals(4, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "ZW{D0kZL/X,.PpQ");
      fibonacciHeap0.add("ZW{D0kZL/X,.PpQ", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("ZW{D0kZL/X,.PpQ", "ZW{D0kZL/X,.PpQ");
      fibonacciHeap0.pollOption();
      fibonacciHeap0.pollOption();
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "ZW{D0kZL/X,.PpQ");
      FibonacciHeap<String, String> fibonacciHeap1 = FibonacciHeap.create();
      FibonacciHeap<String, String> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
      assertEquals(1, fibonacciHeap0.size());
      assertEquals(1, fibonacciHeap2.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      FibonacciHeap<Object, String> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      FibonacciHeap<Object, String> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
      assertEquals(0, fibonacciHeap2.size());
      assertNotSame(fibonacciHeap2, fibonacciHeap1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      String string0 = "]uK; }alH3-\\uCE;";
      fibonacciHeap0.add("negative size: ", string0);
      int int0 = fibonacciHeap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.merge((FibonacciHeap<Object, Integer>) null, (FibonacciHeap<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FibonacciHeap<FibonacciHeap.Entry, Integer> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.add((FibonacciHeap.Entry) null, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FibonacciHeap<FibonacciHeap.Entry, String> fibonacciHeap0 = FibonacciHeap.create();
      Comparator<? super String> comparator0 = fibonacciHeap0.comparator();
      FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.create(comparator0);
      assertEquals(0, fibonacciHeap1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("W-]\u00068}_ro~P/]", "W-]\u00068}_ro~P/]");
      assertEquals(1, fibonacciHeap0.size());
      
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("W-]\u00068}_ro~P/]", "W-]\u00068}_ro~P/]");
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertEquals(1, fibonacciHeap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("W-]\u00068}_ro~P/]", "W-]\u00068}_ro~P/]");
      fibonacciHeap0.spliterator();
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      int int0 = fibonacciHeap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.peekOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.iterator();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.clear();
      assertEquals(0, fibonacciHeap0.size());
  }
}
