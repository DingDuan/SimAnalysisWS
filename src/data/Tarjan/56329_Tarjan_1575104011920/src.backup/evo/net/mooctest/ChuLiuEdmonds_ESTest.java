/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:15:30 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import net.mooctest.Arborescence;
import net.mooctest.ChuLiuEdmonds;
import net.mooctest.DenseWeightedGraph;
import net.mooctest.Edge;
import net.mooctest.ExclusiveEdge;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import net.mooctest.WeightedGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChuLiuEdmonds_ESTest extends ChuLiuEdmonds_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Edge<Weighted<Edge<ExclusiveEdge<String>>>>> treeSet0 = new TreeSet<Edge<Weighted<Edge<ExclusiveEdge<String>>>>>();
      assertNotNull(treeSet0);
      
      LinkedHashSet<Edge<Weighted<Edge<ExclusiveEdge<String>>>>> linkedHashSet0 = new LinkedHashSet<Edge<Weighted<Edge<ExclusiveEdge<String>>>>>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Weighted<Edge<ExclusiveEdge<String>>>>) null, (Set<Edge<Weighted<Edge<ExclusiveEdge<String>>>>>) treeSet0, (Set<Edge<Weighted<Edge<ExclusiveEdge<String>>>>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<Weighted<Edge<String>>> vector0 = new Vector<Weighted<Edge<String>>>(1);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNotNull(vector0);
      
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNotNull(sparseWeightedGraph0);
      
      ChuLiuEdmonds.PartialSolution<String> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<String>) sparseWeightedGraph0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertNotNull(chuLiuEdmonds_PartialSolution0);
      
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<String> exclusiveEdge0 = ExclusiveEdge.of(edge0, (-1020.392138));
      assertNotNull(exclusiveEdge0);
      assertEquals((-1020.392138), exclusiveEdge0.weight, 0.01);
      
      // Undeclared exception!
      try { 
        chuLiuEdmonds_PartialSolution0.addEdge(exclusiveEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSet<Weighted<Edge<ExclusiveEdge<String>>>> hashSet0 = new HashSet<Weighted<Edge<ExclusiveEdge<String>>>>(3143, 3335.0F);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      LinkedHashSet<Weighted<Edge<ExclusiveEdge<String>>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<ExclusiveEdge<String>>>>(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      SparseWeightedGraph<ExclusiveEdge<String>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<ExclusiveEdge<String>>>>) linkedHashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(sparseWeightedGraph0);
      
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Stack<Edge<String>> stack0 = new Stack<Edge<String>>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(edge0));
      
      ExclusiveEdge<String> exclusiveEdge0 = ExclusiveEdge.of(edge0, (List<Edge<String>>) stack0, (double) 3335.0F);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(exclusiveEdge0);
      assertEquals(3335.0, exclusiveEdge0.weight, 0.01);
      assertFalse(stack0.contains(edge0));
      
      Weighted<Arborescence<ExclusiveEdge<String>>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<ExclusiveEdge<String>>) sparseWeightedGraph0, exclusiveEdge0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(weighted0);
      assertEquals(3335.0, exclusiveEdge0.weight, 0.01);
      assertEquals(0.0, weighted0.weight, 0.01);
      assertFalse(stack0.contains(edge0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(edge0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(edge0));
      
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<String>) null, (Set<Edge<String>>) linkedHashSet0, (Set<Edge<String>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(1, doubleArray0.length);
      
      TreeSet<Edge<Integer>> treeSet0 = new TreeSet<Edge<Integer>>();
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) treeSet0, (Set<Edge<Integer>>) treeSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.mooctest.Edge cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[6][9];
      double[] doubleArray1 = new double[2];
      doubleArray0[1] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer(1029);
      assertEquals(1029, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Arborescence<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[5][9];
      double[] doubleArray1 = new double[1];
      doubleArray0[1] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      double[][] doubleArray0 = new double[0][8];
      DenseWeightedGraph<String> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<String>) serviceLoader0, doubleArray0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(denseWeightedGraph0);
      assertEquals(0, doubleArray0.length);
      
      ChuLiuEdmonds.PartialSolution<String> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<String>) denseWeightedGraph0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(chuLiuEdmonds_PartialSolution0);
      assertEquals(0, doubleArray0.length);
      
      Set<String> set0 = chuLiuEdmonds_PartialSolution0.getNodes();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Weighted<Edge<Locale.Category>>> arrayList0 = new ArrayList<Weighted<Edge<Locale.Category>>>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Locale.Category>>>) arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(sparseWeightedGraph0);
      
      ChuLiuEdmonds.PartialSolution<Locale.Category> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Locale.Category>) sparseWeightedGraph0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(chuLiuEdmonds_PartialSolution0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Arborescence<Locale.Category> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Optional<ExclusiveEdge<Locale.Category>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(locale_Category0, arborescence0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet0, (Set<Edge<Integer>>) linkedHashSet0);
      assertEquals(0.0, weighted0.weight, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      ChuLiuEdmonds.PartialSolution<Integer> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) denseWeightedGraph0);
      assertNotNull(chuLiuEdmonds_PartialSolution0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      double[][] doubleArray0 = new double[1][4];
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
      Weighted<Arborescence<Locale.Category>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.Category>) denseWeightedGraph0);
      assertEquals(0.0, weighted0.weight, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<ExclusiveEdge<Object>> arrayDeque0 = new ArrayDeque<ExclusiveEdge<Object>>();
      Vector<Weighted<Edge<ExclusiveEdge<Object>>>> vector0 = new Vector<Weighted<Edge<ExclusiveEdge<Object>>>>(0);
      SparseWeightedGraph<ExclusiveEdge<Object>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<ExclusiveEdge<Object>>) arrayDeque0, (Iterable<Weighted<Edge<ExclusiveEdge<Object>>>>) vector0);
      ChuLiuEdmonds.PartialSolution<ExclusiveEdge<Object>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<ExclusiveEdge<Object>>) sparseWeightedGraph0);
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, (double) 0);
      Optional<ExclusiveEdge<ExclusiveEdge<Object>>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(exclusiveEdge0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Edge<Locale.Category> edge0 = (Edge<Locale.Category>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<Locale.Category> exclusiveEdge0 = ExclusiveEdge.of(edge0, (-566.60181109066));
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Object>) null, (Object) exclusiveEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ChuLiuEdmonds chuLiuEdmonds0 = new ChuLiuEdmonds();
  }
}
