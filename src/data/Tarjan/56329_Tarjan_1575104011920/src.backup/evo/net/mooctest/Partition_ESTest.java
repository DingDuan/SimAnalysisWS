/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:12:25 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import net.mooctest.Partition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Partition_ESTest extends Partition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("5");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("5"));
      
      boolean boolean1 = linkedList0.add("");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("5"));
      
      boolean boolean2 = linkedList0.add("com.google.common.collect.UnmodifiableIterator");
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("5"));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(3, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("5"));
      
      String string0 = partition0.merge("5", "com.google.common.collect.UnmodifiableIterator");
      assertEquals(3, linkedList0.size());
      assertEquals("5", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("5"));
      
      String string1 = partition0.merge("com.google.common.collect.UnmodifiableIterator", "");
      assertEquals(3, linkedList0.size());
      assertEquals("5", string1);
      assertNotNull(string1);
      assertTrue(linkedList0.contains("5"));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(""));
      
      boolean boolean1 = linkedList0.add("net.mooctest.Partition");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      String string0 = partition0.merge("net.mooctest.Partition", "");
      assertEquals(2, linkedList0.size());
      assertEquals("net.mooctest.Partition", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      String string1 = partition0.merge("", "");
      assertEquals(2, linkedList0.size());
      assertEquals("net.mooctest.Partition", string1);
      assertNotNull(string1);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(""));
      
      boolean boolean1 = linkedList0.add("net.mooctest.Partition");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(""));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains(""));
      
      String string0 = partition0.merge("net.mooctest.Partition", "");
      assertEquals(2, linkedList0.size());
      assertEquals("net.mooctest.Partition", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      boolean boolean2 = partition0.sameComponent("", "");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Object> list0 = linkedList0.subList(0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(0));
      assertFalse(list0.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(object0));
      
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(partition0);
      assertFalse(linkedList0.contains(integer0));
      
      // Undeclared exception!
      try { 
        partition0.sameComponent(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = Integer.getInteger((String) null);
      assertNull(integer0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertNotNull(partition0);
      
      // Undeclared exception!
      try { 
        partition0.merge(linkedList0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(partition0);
      
      // Undeclared exception!
      try { 
        partition0.componentOf("@/s-O7&M%[1=B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(""));
      
      boolean boolean1 = linkedList0.add("net.mooctest.Partition");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      String string0 = partition0.merge("net.mooctest.Partition", "");
      assertEquals(2, linkedList0.size());
      assertEquals("net.mooctest.Partition", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      String string1 = partition0.componentOf("");
      assertEquals(2, linkedList0.size());
      assertEquals("net.mooctest.Partition", string1);
      assertNotNull(string1);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("net.mooctest.Partition");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      
      String string0 = partition0.componentOf("net.mooctest.Partition");
      assertEquals(1, linkedList0.size());
      assertEquals("net.mooctest.Partition", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("l");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("l"));
      
      boolean boolean1 = linkedList0.add("com.google.common.collect.UnmodifiableIterator");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("l"));
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("l"));
      
      String string0 = partition0.merge("com.google.common.collect.UnmodifiableIterator", "l");
      assertEquals(2, linkedList0.size());
      assertEquals("com.google.common.collect.UnmodifiableIterator", string0);
      assertNotNull(string0);
      assertTrue(linkedList0.contains("com.google.common.collect.UnmodifiableIterator"));
      
      boolean boolean2 = partition0.sameComponent("com.google.common.collect.UnmodifiableIterator", "l");
      assertEquals(2, linkedList0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(linkedList0.contains("com.google.common.collect.UnmodifiableIterator"));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("ZG6");
      linkedList0.add("can't use .skipNulls() with maps");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("can't use .skipNulls() with maps", "ZG6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("com.google.comon.collect.UnmodifiableIterator");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("com.google.comon.collect.UnmodifiableIterator", "");
      assertEquals("com.google.comon.collect.UnmodifiableIterator", string0);
      
      String string1 = partition0.merge("com.google.comon.collect.UnmodifiableIterator", "");
      assertEquals("com.google.comon.collect.UnmodifiableIterator", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("CD");
      linkedList0.add("net.mooctest.Partition");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "CD");
      assertEquals("", string0);
      
      String string1 = partition0.merge("net.mooctest.Partition", "CD");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      Set<String> set0 = partition0.getNodes();
      assertTrue(set0.isEmpty());
  }
}
