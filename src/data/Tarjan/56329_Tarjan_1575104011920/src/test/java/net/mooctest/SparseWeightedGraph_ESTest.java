/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:07:58 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import net.mooctest.Edge;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import org.junit.runner.RunWith;

public class SparseWeightedGraph_ESTest {
 
  @Test(timeout = 1000)
  public void testc5182ec8_8a6e_4565_b881_f321a557d0e100()  throws Throwable  {
      ArrayList<Weighted<Edge<Integer>>> arrayList0 = new ArrayList<Weighted<Edge<Integer>>>(0);
      Integer integer0 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      Weighted<Edge<Integer>> weighted0 = Weighted.weighted(edge0, 4680.5898);
      arrayList0.add(weighted0);
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) arrayList0);
      Integer integer1 = new Integer(0);
      double double0 = sparseWeightedGraph0.getWeightOf(integer1, integer0);
      assertEquals(4680.5898, double0, 0.01);
  }

  @Test(timeout = 1000)
  public void test9f40fe82_5309_4e2f_944a_902bc08f29d201()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(257);
      TreeSet<Weighted<Edge<Object>>> treeSet0 = new TreeSet<Weighted<Edge<Object>>>();
      Edge<Object> edge0 = new Edge<Object>(treeSet0, treeSet0);
      Weighted<Edge<Object>> weighted0 = Weighted.weighted(edge0, (double) 257);
      treeSet0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Object>) priorityQueue0, (Iterable<Weighted<Edge<Object>>>) treeSet0);
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1000)
  public void test903e4d40_8950_4ed3_b2d3_bf5e3df4343702()  throws Throwable  {
      HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(1430);
      Object object0 = new Object();
      Edge<Object> edge0 = new Edge<Object>(hashSet0, object0);
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 1430);
      hashSet0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) hashSet0);
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 1000)
  public void testb79bcd82_5ab1_46d0_867d_b9da1039667403()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<LinkedHashSet<Object>>>>) null);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertTrue(e instanceof NullPointerException);
      }
  }

  @Test(timeout = 1000)
  public void test83c7a305_9a67_4123_8731_aead98725f4b04()  throws Throwable  {
      Vector<Weighted<Edge<Integer>>> vector0 = new Vector<Weighted<Edge<Integer>>>();
      Edge<Integer> edge0 = new Edge<Integer>((Integer) null, (Integer) null);
      Weighted<Edge<Integer>> weighted0 = new Weighted<Edge<Integer>>(edge0, 0.0);
      vector0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) vector0);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertTrue(e instanceof NullPointerException);
      }
  }

  @Test(timeout = 1000)
  public void test8fa1b1d0_38d0_4eb0_8302_903e91fad96305()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      TreeSet<Weighted<Edge<String>>> treeSet1 = new TreeSet<Weighted<Edge<String>>>();
      Edge<String> edge0 = new Edge<String>("", "");
      Weighted<Edge<String>> weighted0 = Weighted.weighted(edge0, (-167.0690578));
      treeSet1.add(weighted0);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) treeSet0, (Iterable<Weighted<Edge<String>>>) treeSet1);
      Collection<Weighted<Edge<String>>> collection0 = sparseWeightedGraph0.getIncomingEdges("");
      assertTrue(collection0.contains(weighted0));
  }

  @Test(timeout = 1000)
  public void test9ce09070_cde9_416f_8e0d_0ad45d3f161d06()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) linkedHashSet0);
      HashSet<Weighted<Edge<String>>> hashSet0 = new HashSet<Weighted<Edge<String>>>(1288);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) list0, (Iterable<Weighted<Edge<String>>>) hashSet0);
      Collection<Weighted<Edge<String>>> collection0 = sparseWeightedGraph0.getIncomingEdges((String) null);
      assertNotNull(collection0);
  }

  @Test(timeout = 1000)
  public void testfe0ce4fa_145b_49ca_8dfe_f27099e6a58c07()  throws Throwable  {
      ArrayList<Weighted<Edge<Integer>>> arrayList0 = new ArrayList<Weighted<Edge<Integer>>>(1288);
      Integer integer0 = new Integer(1288);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      Weighted<Edge<Integer>> weighted0 = Weighted.weighted(edge0, 4680.5898);
      arrayList0.add(weighted0);
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) arrayList0);
      Integer integer1 = new Integer(0);
      double double0 = sparseWeightedGraph0.getWeightOf(integer1, integer0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 1000)
  public void test492f8cc2_50ee_44c7_8ee2_8c96ec514b1708()  throws Throwable  {
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>(88);
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) arrayDeque0);
      Integer integer0 = new Integer(88);
      double double0 = sparseWeightedGraph0.getWeightOf(integer0, integer0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 1000)
  public void testb1aa59ef_b908_4f50_bdb7_3535108663db09()  throws Throwable  {
      TreeSet<Weighted<Edge<Object>>> treeSet0 = new TreeSet<Weighted<Edge<Object>>>();
      Edge<Object> edge0 = new Edge<Object>("M/z]UN/=_PL4", "M/z]UN/=_PL4");
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, (-501.12436993046));
      treeSet0.add(weighted0);
      Weighted<Edge<Object>> weighted1 = Weighted.weighted(edge0, 0.0);
      treeSet0.add(weighted1);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Object>) null, (Iterable<Weighted<Edge<Object>>>) treeSet0);
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertTrue(e instanceof NullPointerException);
      }
  }

  @Test(timeout = 1000)
  public void test13377be2_a662_45ab_a8d4_c44a324015ac10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      ArrayDeque<Weighted<Edge<Object>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Object>>>((-3522));
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) serviceLoader0, (Iterable<Weighted<Edge<Object>>>) arrayDeque0);
      Collection<Object> collection0 = sparseWeightedGraph0.getNodes();
      assertFalse(collection0.contains((-3522)));
  }
}
