/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:20:17 CST 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Comparator;
import java.util.function.Consumer;
import net.mooctest.FibonacciHeap;



public class TestFibonacciHeap{

//  @Test(timeout = 4000)
//  public void test00()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      doReturn((-1266), 0).when(comparator0).compare(any() , any());
//      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
//      Integer integer0 = new Integer(1502476572);
//      fibonacciHeap0.add("", integer0);
//      Integer integer1 = new Integer(1502476572);
//      fibonacciHeap0.add(integer1, integer1);
//      fibonacciHeap0.add(integer1, integer1);
//      fibonacciHeap0.pollOption();
//      assertEquals(2, fibonacciHeap0.size());
//  }

//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      doReturn("^", "").when(comparator0).toString();
//      doReturn((-1266), 7, 0).when(comparator0).compare(any() , any());
//      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
//      Integer integer0 = new Integer(1502476572);
//      Integer integer1 = new Integer(0);
//      Integer.toUnsignedLong(45);
//      fibonacciHeap0.add(integer0, integer1);
//      fibonacciHeap0.add(integer0, integer0);
//      fibonacciHeap0.add("", integer0);
//      FibonacciHeap.create();
//      fibonacciHeap0.pollOption();
//      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
//      fibonacciHeap1.pollOption();
//      FibonacciHeap<Object, String> fibonacciHeap2 = FibonacciHeap.create();
//      fibonacciHeap2.pollOption();
//      // Undeclared exception!
//      try { 
//        fibonacciHeap1.forEach((Consumer<? super FibonacciHeap.Entry>) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//        
//      }
//  }

//  @Test(timeout = 4000)
//  public void test02()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.create();
//      Integer integer0 = new Integer(0);
//      fibonacciHeap1.add(fibonacciHeap0, integer0);
//      fibonacciHeap1.add(fibonacciHeap1, integer0);
//      FibonacciHeap<Object, Integer> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap1);
//      assertEquals(2, fibonacciHeap1.size());
//      assertEquals(4, fibonacciHeap2.size());
//  }

//  @Test(timeout = 4000)
//  public void test03()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.create();
//      Integer integer0 = new Integer(0);
//      fibonacciHeap1.add(fibonacciHeap0, integer0);
//      FibonacciHeap<Object, Integer> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap1);
//      assertEquals(1, fibonacciHeap1.size());
//      
//      fibonacciHeap1.pollOption();
//      FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap2);
//      assertEquals(0, fibonacciHeap1.size());
//  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create();
      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      FibonacciHeap<Object, Integer> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap1);
      assertEquals(0, fibonacciHeap2.size());
      assertNotSame(fibonacciHeap2, fibonacciHeap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create();
      Integer integer0 = new Integer(0);
      fibonacciHeap0.add("", integer0);
      int int0 = fibonacciHeap0.size();
      assertEquals(1, int0);
  }

//  @Test(timeout = 4000)
//  public void test06()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      doReturn((String) null).when(comparator0).toString();
//      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
//      FibonacciHeap<Object, String> fibonacciHeap1 = FibonacciHeap.create();
//      // Undeclared exception!
//      try { 
//        FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap1);
//        fail("Expecting exception: IllegalArgumentException");
//      
//      } catch(Exception e) {
//         
//      }
//  }

//  @Test(timeout = 4000)
//  public void test07()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<String, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      // Undeclared exception!
//      try { 
//        fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, (Object) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//         
//      }
//  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(Exception e) {
         //
         
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.add("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(Exception e) {
         
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.comparator();
      assertEquals(0, fibonacciHeap0.size());
  }

//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      doReturn((-1), (-1), 0).when(comparator0).compare(any() , any());
//      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
//      Integer integer0 = new Integer(1502476572);
//      Integer integer1 = new Integer(0);
//      fibonacciHeap0.add(integer0, integer1);
//      fibonacciHeap0.add(integer0, integer0);
//      fibonacciHeap0.add("", integer0);
//      fibonacciHeap0.pollOption();
//      assertEquals(2, fibonacciHeap0.size());
//  }

//  @Test(timeout = 4000)
//  public void test12()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.create();
//      Integer integer0 = new Integer(0);
//      fibonacciHeap1.add(fibonacciHeap0, integer0);
//      boolean boolean0 = fibonacciHeap1.isEmpty();
//      assertEquals(1, fibonacciHeap1.size());
//      assertFalse(boolean0);
//  }

//  @Test(timeout = 4000)
//  public void test13()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      boolean boolean0 = fibonacciHeap0.isEmpty();
//      assertEquals(0, fibonacciHeap0.size());
//      assertTrue(boolean0);
//  }

//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
//      fibonacciHeap0.add("", "");
//      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//      fibonacciHeap0.forEach(consumer0);
//      assertEquals(1, fibonacciHeap0.size());
//  }

//  @Test(timeout = 4000)
//  public void test15()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      int int0 = fibonacciHeap0.size();
//      assertEquals(0, int0);
//  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.peekOption();
      assertEquals(0, fibonacciHeap0.size());
  }

//  @Test(timeout = 4000)
//  public void test17()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Integer, Integer>, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
//      // Undeclared exception!
//      try { 
//        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//         
//      }
//  }

//  @Test(timeout = 4000)
//  public void test18()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
//      fibonacciHeap0.iterator();
//      assertEquals(0, fibonacciHeap0.size());
//  }

//  @Test(timeout = 4000)
//  public void test19()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciHeap<Integer, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
//      fibonacciHeap0.clear();
//      assertEquals(0, fibonacciHeap0.size());
//  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        FibonacciHeap.merge(fibonacciHeap0, (FibonacciHeap<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(Exception e) {
         
      }
  }
}
