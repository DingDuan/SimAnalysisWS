/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:18:28 CST 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;

import com.google.common.base.Optional;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import net.mooctest.Arborescence;
import net.mooctest.Edge;
import net.mooctest.EdgeQueueMap;
import net.mooctest.ExclusiveEdge;
import net.mooctest.FibonacciQueue;
import net.mooctest.Pair;
import net.mooctest.Partition;
import net.mooctest.Weighted;



public class TestEdgeQueueMap {

//  @Test(timeout = 4000)
//  public void test0()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
//      Partition<Object> partition0 = Partition.singletons((Collection<Object>) fibonacciQueue0);
//      EdgeQueueMap.EdgeQueue<Object> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Object) null, partition0);
//      Edge<Object> edge0 = new Edge<Object>((Object) null, (Object) null);
//      Stack<Edge<Object>> stack0 = new Stack<Edge<Object>>();
//      ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, (List<Edge<Object>>) stack0, 0.0);
//      // Undeclared exception!
//      try { 
//        edgeQueueMap_EdgeQueue0.addEdge(exclusiveEdge0);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//        
//      }
//  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      Partition<Locale.Category> partition0 = Partition.singletons((Collection<Locale.Category>) vector0);
      EdgeQueueMap<Locale.Category> edgeQueueMap0 = new EdgeQueueMap<Locale.Category>(partition0);
      // Undeclared exception!
      try { 
        edgeQueueMap0.addEdge((Weighted<Edge<Locale.Category>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.EdgeQueueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) fibonacciQueue0);
      EdgeQueueMap.EdgeQueue<Integer> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Integer) null, partition0);
      Optional<ExclusiveEdge<Integer>> optional0 = edgeQueueMap_EdgeQueue0.popBestEdge((Arborescence<Integer>) null);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      Partition<Locale.Category> partition0 = Partition.singletons((Collection<Locale.Category>) hashSet0);
      EdgeQueueMap<Locale.Category> edgeQueueMap0 = new EdgeQueueMap<Locale.Category>(partition0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      ArrayDeque<Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>>> arrayDeque0 = new ArrayDeque<Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>>>();
      EdgeQueueMap.EdgeQueue edgeQueueMap_EdgeQueue0 = edgeQueueMap0.merge(locale_Category0, arrayDeque0);
      assertNotNull(edgeQueueMap_EdgeQueue0);
  }

//  @Test(timeout = 4000)
//  public void test4()  throws Throwable  {
//      HashSet<Pair<Locale.Category, Locale.Category>> hashSet0 = new HashSet<Pair<Locale.Category, Locale.Category>>();
//      Partition<Pair<Locale.Category, Locale.Category>> partition0 = Partition.singletons((Collection<Pair<Locale.Category, Locale.Category>>) hashSet0);
//      EdgeQueueMap<Pair<Locale.Category, Locale.Category>> edgeQueueMap0 = new EdgeQueueMap<Pair<Locale.Category, Locale.Category>>(partition0);
//      Locale.Category locale_Category0 = Locale.Category.FORMAT;
//      Pair<Locale.Category, Locale.Category> pair0 = Pair.of(locale_Category0, locale_Category0);
//      ArrayDeque<Pair<EdgeQueueMap.EdgeQueue<Pair<Locale.Category, Locale.Category>>, Weighted<Edge<Pair<Locale.Category, Locale.Category>>>>> arrayDeque0 = new ArrayDeque<Pair<EdgeQueueMap.EdgeQueue<Pair<Locale.Category, Locale.Category>>, Weighted<Edge<Pair<Locale.Category, Locale.Category>>>>>(0);
//      Pair<EdgeQueueMap.EdgeQueue<Pair<Locale.Category, Locale.Category>>, Weighted<Edge<Pair<Locale.Category, Locale.Category>>>> pair1 = (Pair<EdgeQueueMap.EdgeQueue<Pair<Locale.Category, Locale.Category>>, Weighted<Edge<Pair<Locale.Category, Locale.Category>>>>));
//      arrayDeque0.add(pair1);
//      // Undeclared exception!
//      try { 
//        edgeQueueMap0.merge(pair0, arrayDeque0);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//         
//      }
//  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      Partition<Locale.Category> partition0 = Partition.singletons((Collection<Locale.Category>) hashSet0);
      EdgeQueueMap<Locale.Category> edgeQueueMap0 = new EdgeQueueMap<Locale.Category>(partition0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Arborescence<Locale.Category> arborescence0 = Arborescence.empty();
      Optional<ExclusiveEdge<Locale.Category>> optional0 = edgeQueueMap0.popBestEdge(locale_Category0, arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      Partition<Locale.Category> partition0 = Partition.singletons((Collection<Locale.Category>) hashSet0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EdgeQueueMap.EdgeQueue<Locale.Category> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create(locale_Category0, partition0);
      Optional<ExclusiveEdge<Locale.Category>> optional0 = edgeQueueMap_EdgeQueue0.popBestEdge();
      assertNotNull(optional0);
  }
}
