/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:24:01 CST 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import net.mooctest.Partition;



public class TestPartition{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("negative size: ");
      linkedList0.add("'-+IW6&kff<e]=#");
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "negative size: ");
      assertEquals("", string0);
      
      String string1 = partition0.merge("'-+IW6&kff<e]=#", "negative size: ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(Exception e) {
         
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        partition0.sameComponent("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Partition<Object> partition1 = Partition.singletons((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        partition1.merge(linkedList0, partition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        partition0.componentOf((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("negative size: ");
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("negative size: ", "");
      assertEquals("negative size: ", string0);
      
      String string1 = partition0.componentOf("");
      assertEquals("negative size: ", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.componentOf("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Z09B(xbS");
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("Z09B(xbS", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("negative size: ");
      linkedList0.add("");
      linkedList0.add("'-+If6ik^f<eh=#");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "'-+If6ik^f<eh=#");
      assertEquals("", string0);
      
      String string1 = partition0.merge("'-+If6ik^f<eh=#", "negative size: ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("'-+If6ik^f<eh=#");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "'-+If6ik^f<eh=#");
      assertEquals("", string0);
      
      String string1 = partition0.merge("'-+If6ik^f<eh=#", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      Set<String> set0 = partition0.getNodes();
      assertEquals(0, set0.size());
  }
}
