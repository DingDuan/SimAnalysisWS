/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:20:52 CST 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.Comparator;
import java.util.Iterator;
import net.mooctest.FibonacciHeap;
import net.mooctest.FibonacciQueue;



public class TestFibonacciQueue{

//  @Test(timeout = 4000)
//  public void test0()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
//      int int0 = fibonacciQueue0.size();
//      assertEquals(0, int0);
//  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      fibonacciQueue0.offer("");
      int int0 = fibonacciQueue0.size();
      assertEquals(1, int0);
  }

//  @Test(timeout = 4000)
//  public void test2()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
//      FibonacciQueue<String> fibonacciQueue1 = FibonacciQueue.create();
//      fibonacciQueue1.offer("");
//      fibonacciQueue0.addAll(fibonacciQueue1);
//      Object object0 = fibonacciQueue0.poll();
//      assertEquals("", object0);
//  }

//  @Test(timeout = 4000)
//  public void test3()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<FibonacciHeap.Entry> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
//      Iterator<FibonacciHeap.Entry> iterator0 = fibonacciQueue0.iterator();
//      assertNotNull(iterator0);
//  }

//  @Test(timeout = 4000)
//  public void test4()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
//      // Undeclared exception!
//      try { 
//        fibonacciQueue0.offer((Object) null);
//        fail("Expecting exception: NullPointerException");
//      
//      } catch(Exception e) {
//        
//      }
//  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciQueue.create((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(Exception e) {
        
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
      Integer integer0 = new Integer(0);
      fibonacciQueue0.offer(integer0);
      Integer integer1 = fibonacciQueue0.peek();
      assertTrue(fibonacciQueue0.contains(integer1));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
      Integer integer0 = fibonacciQueue0.peek();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      Comparator<? super String> comparator0 = fibonacciQueue0.comparator();
      assertNotNull(comparator0);
  }

//  @Test(timeout = 4000)
//  public void test9()  throws Throwable  {
//      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//      FibonacciQueue<FibonacciHeap.Entry> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
//      FibonacciHeap.Entry fibonacciHeap_Entry0 = fibonacciQueue0.poll();
//      assertNull(fibonacciHeap_Entry0);
//  }
}
