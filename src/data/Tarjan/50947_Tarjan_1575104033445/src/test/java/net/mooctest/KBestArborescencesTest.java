/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:33:12 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import net.mooctest.Arborescence;
import net.mooctest.DenseWeightedGraph;
import net.mooctest.Edge;
import net.mooctest.EdgeQueueMap;
import net.mooctest.ExclusiveEdge;
import net.mooctest.KBestArborescences;
import net.mooctest.Pair;
import net.mooctest.Partition;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import net.mooctest.WeightedGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class KBestArborescencesTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Arborescence<Object> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<Object>> weighted0 = new Weighted<Arborescence<Object>>(arborescence0, (-1.0));
      assertNotNull(weighted0);
      assertEquals((-1.0), weighted0.weight, 0.01);
      
      boolean boolean0 = arborescence0.equals(weighted0);
      assertFalse(boolean0);
      assertEquals((-1.0), weighted0.weight, 0.01);
      
      TreeSet<Edge<Object>> treeSet0 = new TreeSet<Edge<Object>>();
      assertNotNull(treeSet0);
      
      KBestArborescences.SubsetOfSolutions<Object> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<Object>(edge0, weighted0, treeSet0, treeSet0);
      assertNotNull(kBestArborescences_SubsetOfSolutions0);
      assertEquals((-1.0), weighted0.weight, 0.01);
      
      PriorityQueue<Weighted<Edge<Locale.Category>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Locale.Category>>>(1);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Locale.Category>>>) priorityQueue0);
      assertNotNull(sparseWeightedGraph0);
      assertEquals(0, priorityQueue0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      List<Weighted<Arborescence<Locale.Category>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Locale.Category>) sparseWeightedGraph0, locale_Category0, 1);
      assertNotNull(list0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      TreeSet<Weighted<Edge<String>>> treeSet1 = new TreeSet<Weighted<Edge<String>>>((Comparator<? super Weighted<Edge<String>>>) null);
      assertNotNull(treeSet1);
      
      SparseWeightedGraph<String> sparseWeightedGraph1 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) treeSet1);
      assertNotNull(sparseWeightedGraph1);
      
      TreeSet<Edge<String>> treeSet2 = new TreeSet<Edge<String>>();
      assertNotNull(treeSet2);
      
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<String>) sparseWeightedGraph1, (Set<Edge<String>>) treeSet2, (Set<Edge<String>>) linkedHashSet0, (Weighted<Arborescence<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = (-1865.622);
      doubleArray1[2] = 650.058587956675;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1865.622);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-399.9589);
      doubleArray1[7] = 1022.568170730122;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.7;
      doubleArray2[1] = (-2593.922687);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.7;
      doubleArray2[4] = (-1865.622);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-461));
      assertNotNull(integer0);
      assertEquals((-461), (int)integer0);
      
      // Undeclared exception!
//      KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 235);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExclusiveEdge<KBestArborescences> exclusiveEdge0 = ExclusiveEdge.of((Edge<KBestArborescences>) null, 1.0);
      assertNotNull(exclusiveEdge0);
      assertEquals(1.0, exclusiveEdge0.weight, 0.01);
      
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      Comparator<KBestArborescences> comparator0 = (Comparator<KBestArborescences>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>(arrayDeque0);
      assertNotNull(hashSet0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LinkedList<Weighted<Edge<Locale.Category>>> linkedList0 = new LinkedList<Weighted<Edge<Locale.Category>>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Locale.Category>) hashSet0, (Iterable<Weighted<Edge<Locale.Category>>>) linkedList0);
      assertNotNull(sparseWeightedGraph0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      LinkedHashSet<Edge<Locale.Category>> linkedHashSet0 = new LinkedHashSet<Edge<Locale.Category>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Arborescence<Locale.Category> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<Locale.Category>> weighted0 = Weighted.weighted(arborescence0, 1.0);
      assertNotNull(weighted0);
      assertEquals(1.0, weighted0.weight, 0.01);
      
      HashSet<Edge<Locale.Category>> hashSet1 = new HashSet<Edge<Locale.Category>>();
      assertNotNull(hashSet1);
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      
      LinkedHashSet<Edge<Locale.Category>> linkedHashSet1 = new LinkedHashSet<Edge<Locale.Category>>();
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      KBestArborescences.SubsetOfSolutions<Locale.Category> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<Locale.Category>((Edge<Locale.Category>) null, weighted0, hashSet1, linkedHashSet1);
      assertNotNull(kBestArborescences_SubsetOfSolutions0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(1.0, weighted0.weight, 0.01);
      
      Weighted<Arborescence<Locale.Category>> weighted1 = kBestArborescences_SubsetOfSolutions0.bestArborescence;
      assertNotNull(weighted1);
      assertEquals(1.0, weighted1.weight, 0.01);
      assertSame(weighted1, weighted0);
      
      Optional<Weighted<KBestArborescences.SubsetOfSolutions<Locale.Category>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Locale.Category>) sparseWeightedGraph0, (Set<Edge<Locale.Category>>) linkedHashSet0, (Set<Edge<Locale.Category>>) linkedHashSet0, weighted1);
      assertNotNull(optional0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet1.size());
      assertTrue(hashSet1.isEmpty());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertEquals(1.0, weighted0.weight, 0.01);
      assertEquals(1.0, weighted1.weight, 0.01);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertSame(weighted0, weighted1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertSame(weighted1, weighted0);
      
      PriorityQueue<KBestArborescences> priorityQueue0 = new PriorityQueue<KBestArborescences>(998, comparator0);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(kBestArborescences0));
      assertEquals(0, priorityQueue0.size());
      
      Partition<KBestArborescences> partition0 = Partition.singletons((Collection<KBestArborescences>) priorityQueue0);
      assertNotNull(partition0);
      assertFalse(priorityQueue0.contains(kBestArborescences0));
      assertEquals(0, priorityQueue0.size());
      
      EdgeQueueMap.EdgeQueue<KBestArborescences> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create(kBestArborescences0, partition0);
      assertNotNull(edgeQueueMap_EdgeQueue0);
      assertFalse(priorityQueue0.contains(kBestArborescences0));
      assertEquals(0, priorityQueue0.size());
      
      Optional<ExclusiveEdge<KBestArborescences>> optional1 = KBestArborescences.seek(exclusiveEdge0, (Arborescence<KBestArborescences>) null, (EdgeQueueMap.EdgeQueue<KBestArborescences>) edgeQueueMap_EdgeQueue0);
      assertNotNull(optional1);
      assertFalse(priorityQueue0.contains(kBestArborescences0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(1.0, exclusiveEdge0.weight, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashSet<Weighted<Edge<Locale.LanguageRange>>> hashSet0 = new HashSet<Weighted<Edge<Locale.LanguageRange>>>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      SparseWeightedGraph<Locale.LanguageRange> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Locale.LanguageRange>>>) hashSet0);
      assertNotNull(sparseWeightedGraph0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      List<Weighted<Arborescence<Locale.LanguageRange>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Locale.LanguageRange>) sparseWeightedGraph0, (Locale.LanguageRange) null, 2475);
      assertNotNull(list0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Stack<Edge<Object>> stack0 = new Stack<Edge<Object>>();
      assertNotNull(stack0);
      assertFalse(stack0.contains(edge0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, (List<Edge<Object>>) stack0, (double) 2475);
      assertNotNull(exclusiveEdge0);
      assertFalse(stack0.contains(edge0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(2475.0, exclusiveEdge0.weight, 0.01);
      
      // Undeclared exception!
      try { 
        ImmutableMap.of((Object) sparseWeightedGraph0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value in entry: net.mooctest.SparseWeightedGraph@1=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2058.772113;
      doubleArray1[1] = (-1865.622);
      doubleArray1[2] = 650.058587956675;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.7;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-399.9589);
      doubleArray1[7] = 1022.568170730122;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.7;
      doubleArray2[1] = 2058.772113;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.7;
      doubleArray2[4] = (-1865.622);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-399.9589);
      doubleArray3[2] = (-1865.622);
      doubleArray3[3] = 2058.772113;
      doubleArray3[4] = 650.058587956675;
      doubleArray3[5] = 2058.772113;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(3, doubleArray0.length);
      
      Integer integer0 = new Integer((-461));
      assertNotNull(integer0);
      assertEquals((-461), (int)integer0);
      
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 235);
      assertNotNull(list0);
      assertEquals(3, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-169.7910388531);
      doubleArray1[1] = 497.9305;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (-1.0);
      doubleArray0[1] = doubleArray2;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer(1914);
      assertNotNull(integer0);
      assertEquals(1914, (int)integer0);
      
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 2);
      assertNotNull(list0);
      assertEquals(2, doubleArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 325.45366;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 325.45366;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-2479.52176253793);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 325.45366;
      doubleArray4[6] = 325.45366;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 325.45366;
      doubleArray7[3] = (-2479.52176253793);
      doubleArray7[4] = 325.45366;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, (Integer) null, 1615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashSet<Edge<ExclusiveEdge<Locale.LanguageRange>>> hashSet0 = new HashSet<Edge<ExclusiveEdge<Locale.LanguageRange>>>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Object[] objectArray0 = new Object[0];
      Edge<ExclusiveEdge<Locale.LanguageRange>> edge0 = (Edge<ExclusiveEdge<Locale.LanguageRange>>) mock(Edge.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = hashSet0.add(edge0);
      assertTrue(hashSet0.contains(edge0));
      assertTrue(boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      Object[] objectArray1 = hashSet0.toArray(objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(1, objectArray1.length);
      assertTrue(hashSet0.contains(edge0));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<ExclusiveEdge<Locale.LanguageRange>>) null, (Set<Edge<ExclusiveEdge<Locale.LanguageRange>>>) hashSet0, (Set<Edge<ExclusiveEdge<Locale.LanguageRange>>>) hashSet0, (Weighted<Arborescence<ExclusiveEdge<Locale.LanguageRange>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      WeightedGraph<KBestArborescences> weightedGraph0 = null;
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Vector<Edge<Object>> vector0 = new Vector<Edge<Object>>();
      assertNotNull(vector0);
      assertFalse(vector0.contains(edge0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        KBestArborescences.getKBestArborescences((WeightedGraph<KBestArborescences>) null, kBestArborescences0, 1840);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1051.1500629284449);
      doubleArray1[1] = (-1556.580728);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1051.1500629284449);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1556.580728);
      doubleArray3[1] = (-1051.1500629284449);
      doubleArray3[2] = (-1183.26);
      doubleArray3[3] = (-1556.580728);
      doubleArray3[4] = (-1051.1500629284449);
      doubleArray3[5] = (-1556.580728);
      doubleArray3[6] = (-1556.580728);
      doubleArray3[7] = (-1051.1500629284449);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-1183.26);
      doubleArray4[1] = (-1556.580728);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray5[0] = (-1051.1500629284449);
      doubleArray5[1] = (-1183.26);
      doubleArray5[2] = (-1183.26);
      doubleArray5[3] = Double.NEGATIVE_INFINITY;
      doubleArray5[4] = (-1556.580728);
      doubleArray5[5] = (-1051.1500629284449);
      doubleArray5[6] = (-1051.1500629284449);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      
      doubleArray6[0] = (-1556.580728);
      doubleArray6[1] = Double.NEGATIVE_INFINITY;
      doubleArray6[2] = (-1183.26);
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray6[4] = (-1051.1500629284449);
      doubleArray6[5] = (-1051.1500629284449);
      doubleArray6[6] = Double.NEGATIVE_INFINITY;
      doubleArray6[7] = (-1051.1500629284449);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      
      doubleArray8[0] = (-1556.580728);
      doubleArray8[1] = (-1556.580728);
      doubleArray8[2] = (-1051.1500629284449);
      doubleArray8[3] = (-557.573);
      doubleArray8[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray8;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      assertNotNull(denseWeightedGraph0);
      assertEquals(8, doubleArray0.length);
      
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, (-1051.1500629284449));
      assertNotNull(weighted0);
      assertEquals((-1051.1500629284449), weighted0.weight, 0.01);
      
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet0, (Set<Edge<Integer>>) linkedHashSet0, weighted0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<Edge<EdgeQueueMap.EdgeQueue<Double>>> treeSet0 = new TreeSet<Edge<EdgeQueueMap.EdgeQueue<Double>>>();
      assertNotNull(treeSet0);
      
      TreeSet<Edge<EdgeQueueMap.EdgeQueue<Double>>> treeSet1 = new TreeSet<Edge<EdgeQueueMap.EdgeQueue<Double>>>();
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      Arborescence<EdgeQueueMap.EdgeQueue<Double>> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<EdgeQueueMap.EdgeQueue<Double>>> weighted0 = Weighted.weighted(arborescence0, (-1.0));
      assertNotNull(weighted0);
      assertEquals((-1.0), weighted0.weight, 0.01);
      
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<EdgeQueueMap.EdgeQueue<Double>>) null, (Set<Edge<EdgeQueueMap.EdgeQueue<Double>>>) treeSet0, (Set<Edge<EdgeQueueMap.EdgeQueue<Double>>>) treeSet1, weighted0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, 1111.69243);
      assertNotNull(exclusiveEdge0);
      assertEquals(1111.69243, exclusiveEdge0.weight, 0.01);
      
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      TreeSet<KBestArborescences> treeSet0 = new TreeSet<KBestArborescences>();
      assertNotNull(treeSet0);
      
      Partition<KBestArborescences> partition0 = Partition.singletons((Collection<KBestArborescences>) treeSet0);
      assertNotNull(partition0);
      
      EdgeQueueMap.EdgeQueue<KBestArborescences> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create(kBestArborescences0, partition0);
      assertNotNull(edgeQueueMap_EdgeQueue0);
      
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Integer integer0 = new Integer(602);
      assertNotNull(integer0);
      assertEquals(602, (int)integer0);
      
      Pair<Object, Integer> pair0 = Pair.of((Object) arborescence0, integer0);
      assertNotNull(pair0);
      
      Integer integer1 = new Integer((-119));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-119), (int)integer1);
      
      ImmutableBiMap<Object, Object> immutableBiMap0 = ImmutableBiMap.of((Object) "", (Object) edgeQueueMap_EdgeQueue0, (Object) pair0, (Object) integer1);
      assertNotNull(immutableBiMap0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, immutableBiMap0.size());
      
      Arborescence<Object> arborescence1 = Arborescence.of((ImmutableMap<Object, Object>) immutableBiMap0);
      assertNotNull(arborescence1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, immutableBiMap0.size());
      
      EdgeQueueMap.EdgeQueue<Object> edgeQueueMap_EdgeQueue1 = (EdgeQueueMap.EdgeQueue<Object>) mock(EdgeQueueMap.EdgeQueue.class, new ViolatedAssumptionAnswer());
      doReturn((Optional) null).when(edgeQueueMap_EdgeQueue1).popBestEdge();
      // Undeclared exception!
      try { 
        KBestArborescences.seek(exclusiveEdge0, arborescence1, (EdgeQueueMap.EdgeQueue<Object>) edgeQueueMap_EdgeQueue1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Weighted<Edge<Object>>> treeSet0 = new TreeSet<Weighted<Edge<Object>>>(comparator0);
      assertNotNull(treeSet0);
      
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) treeSet0);
      assertNotNull(sparseWeightedGraph0);
      
      HashSet<Edge<Object>> hashSet0 = new HashSet<Edge<Object>>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Arborescence<Object> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<Object>> weighted0 = new Weighted<Arborescence<Object>>(arborescence0, 2066.9940446);
      assertNotNull(weighted0);
      assertEquals(2066.9940446, weighted0.weight, 0.01);
      
      Optional<Weighted<KBestArborescences.SubsetOfSolutions<Object>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Object>) sparseWeightedGraph0, (Set<Edge<Object>>) hashSet0, (Set<Edge<Object>>) linkedHashSet0, weighted0);
      assertNotNull(optional0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(2066.9940446, weighted0.weight, 0.01);
      
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet1);
      
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>((SortedSet<? extends Locale.Category>) treeSet1);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 2066.9940446;
      doubleArray1[1] = 2066.9940446;
      doubleArray1[2] = 2066.9940446;
      doubleArray1[3] = 2066.9940446;
      doubleArray1[4] = 2066.9940446;
      doubleArray1[5] = 2066.9940446;
      doubleArray1[6] = 2066.9940446;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2066.9940446;
      doubleArray2[1] = 2066.9940446;
      doubleArray2[2] = 2066.9940446;
      doubleArray2[3] = 2066.9940446;
      doubleArray2[4] = 2066.9940446;
      doubleArray2[5] = 2066.9940446;
      doubleArray2[6] = 2066.9940446;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2066.9940446;
      doubleArray3[1] = 3213.377793944613;
      doubleArray3[2] = 2066.9940446;
      doubleArray3[3] = 2066.9940446;
      doubleArray3[4] = 2066.9940446;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<Locale.Category>) priorityQueue0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(1);
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(1));
      assertEquals(0, priorityQueue0.size());
      
      LinkedHashSet<Weighted<Edge<Object>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Object>>>(1, 1);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) priorityQueue0, (Iterable<Weighted<Edge<Object>>>) linkedHashSet0);
      assertNotNull(sparseWeightedGraph0);
      assertFalse(priorityQueue0.contains(1));
      assertEquals(0, priorityQueue0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      TreeSet<Edge<Object>> treeSet0 = new TreeSet<Edge<Object>>();
      assertNotNull(treeSet0);
      
      Arborescence<Object> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      Weighted<Arborescence<Object>> weighted0 = Weighted.weighted(arborescence0, (double) 1);
      assertNotNull(weighted0);
      assertEquals(1.0, weighted0.weight, 0.01);
      
      Optional<Weighted<KBestArborescences.SubsetOfSolutions<Object>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Object>) sparseWeightedGraph0, (Set<Edge<Object>>) treeSet0, (Set<Edge<Object>>) treeSet0, weighted0);
      assertNotNull(optional0);
      assertFalse(priorityQueue0.contains(1));
      assertEquals(0, priorityQueue0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1.0, weighted0.weight, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Weighted<Edge<Weighted<Locale.Category>>>> treeSet0 = new TreeSet<Weighted<Edge<Weighted<Locale.Category>>>>();
      assertNotNull(treeSet0);
      
      TreeSet<Weighted<Edge<Weighted<Locale.Category>>>> treeSet1 = new TreeSet<Weighted<Edge<Weighted<Locale.Category>>>>((SortedSet<Weighted<Edge<Weighted<Locale.Category>>>>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      SparseWeightedGraph<Weighted<Locale.Category>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<Locale.Category>>>>) treeSet1);
      assertNotNull(sparseWeightedGraph0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      
      List<Weighted<Arborescence<Weighted<Locale.Category>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Weighted<Locale.Category>>) sparseWeightedGraph0, (Weighted<Locale.Category>) null, 34);
      assertNotNull(list0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arborescence<Object> arborescence0 = Arborescence.empty();
      assertNotNull(arborescence0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) arrayList0);
      assertNotNull(partition0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      EdgeQueueMap.EdgeQueue<Object> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Object) null, partition0);
      assertNotNull(edgeQueueMap_EdgeQueue0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Optional<ExclusiveEdge<Object>> optional0 = KBestArborescences.seek((ExclusiveEdge<Object>) null, arborescence0, (EdgeQueueMap.EdgeQueue<Object>) edgeQueueMap_EdgeQueue0);
      assertNotNull(optional0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Edge<Weighted<KBestArborescences>>> linkedHashSet0 = new LinkedHashSet<Edge<Weighted<KBestArborescences>>>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      assertNotNull(kBestArborescences0);
      
      Weighted<KBestArborescences> weighted0 = Weighted.weighted(kBestArborescences0, 349.02598508);
      assertNotNull(weighted0);
      assertEquals(349.02598508, weighted0.weight, 0.01);
      
      ImmutableBiMap<Weighted<KBestArborescences>, Weighted<KBestArborescences>> immutableBiMap0 = ImmutableBiMap.of(weighted0, weighted0);
      assertNotNull(immutableBiMap0);
      assertEquals(1, immutableBiMap0.size());
      assertEquals(349.02598508, weighted0.weight, 0.01);
      
      Arborescence<Weighted<KBestArborescences>> arborescence0 = Arborescence.of((ImmutableMap<Weighted<KBestArborescences>, Weighted<KBestArborescences>>) immutableBiMap0);
      assertNotNull(arborescence0);
      assertEquals(1, immutableBiMap0.size());
      assertEquals(349.02598508, weighted0.weight, 0.01);
      
      Weighted<Arborescence<Weighted<KBestArborescences>>> weighted1 = new Weighted<Arborescence<Weighted<KBestArborescences>>>(arborescence0, (-1841.94));
      assertNotNull(weighted1);
      assertEquals(1, immutableBiMap0.size());
      assertEquals(349.02598508, weighted0.weight, 0.01);
      assertEquals((-1841.94), weighted1.weight, 0.01);
      
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Weighted<KBestArborescences>>) null, (Set<Edge<Weighted<KBestArborescences>>>) linkedHashSet0, (Set<Edge<Weighted<KBestArborescences>>>) linkedHashSet0, weighted1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2058.772113;
      doubleArray1[1] = (-1865.622);
      doubleArray1[2] = 650.058587956675;
      doubleArray1[3] = 4.330795717809729;
      doubleArray1[4] = (-1865.622);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-399.9589);
      doubleArray1[7] = 1022.568170730122;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.7;
      doubleArray2[1] = 2058.772113;
      doubleArray2[2] = 4.330795717809729;
      doubleArray2[3] = 0.7;
      doubleArray2[4] = (-1865.622);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 4.330795717809729;
      doubleArray3[1] = (-399.9589);
      doubleArray3[2] = (-1865.622);
      doubleArray3[3] = 2058.772113;
      doubleArray3[4] = 650.058587956675;
      doubleArray3[5] = 2058.772113;
      doubleArray3[6] = 0.0;
      doubleArray0[0] = doubleArray3;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer((-461));
      // Undeclared exception!
//      KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 235);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2058.772113;
      doubleArray1[1] = (-1865.622);
      doubleArray1[2] = 650.058587956675;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.7;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-399.9589);
      doubleArray1[7] = 1022.568170730122;
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.7;
      doubleArray2[1] = 2058.772113;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.7;
      doubleArray2[4] = (-1865.622);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-399.9589);
      doubleArray3[2] = (-1865.622);
      doubleArray3[3] = 2058.772113;
      doubleArray3[4] = 650.058587956675;
      doubleArray3[5] = 2058.772113;
      doubleArray3[6] = 0.0;
      doubleArray0[2] = doubleArray3;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer((-461));
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 235);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Arborescence<Object> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Object>> weighted0 = new Weighted<Arborescence<Object>>(arborescence0, (-1.0));
      arborescence0.equals(weighted0);
      TreeSet<Edge<Object>> treeSet0 = new TreeSet<Edge<Object>>();
      PriorityQueue<Weighted<Edge<Locale.Category>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Locale.Category>>>(1);
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Locale.Category>>>) priorityQueue0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      KBestArborescences.getKBestArborescences((WeightedGraph<Locale.Category>) sparseWeightedGraph0, locale_Category0, 1);
      TreeSet<Weighted<Edge<String>>> treeSet1 = new TreeSet<Weighted<Edge<String>>>((Comparator<? super Weighted<Edge<String>>>) null);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) treeSet1);
      TreeSet<Edge<String>> treeSet2 = new TreeSet<Edge<String>>();
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Weighted<Edge<Locale.Category>>> treeSet0 = new TreeSet<Weighted<Edge<Locale.Category>>>();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Edge<Edge<Locale.Category>>> treeSet0 = new TreeSet<Edge<Edge<Locale.Category>>>();
      Arborescence.empty();
      Edge<Double> edge0 = (Edge<Double>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge.of(edge0, (List<Edge<Double>>) null, (-254.307193887));
      // Undeclared exception!
      try { 
        ImmutableBiMap.of((Double) (-254.307193887), (Double) (-254.307193887), (Double) (-254.307193887), (Double) (-254.307193887));
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: -254.307193887=-254.307193887 and -254.307193887=-254.307193887
         //
         verifyException("com.google.common.collect.RegularImmutableBiMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<Weighted<Edge<KBestArborescences.SubsetOfSolutions<Double>>>> treeSet0 = new TreeSet<Weighted<Edge<KBestArborescences.SubsetOfSolutions<Double>>>>();
      SparseWeightedGraph<KBestArborescences.SubsetOfSolutions<Double>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<KBestArborescences.SubsetOfSolutions<Double>>>>) treeSet0);
      Edge<Double> edge0 = (Edge<Double>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Arborescence<Double> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Double>> weighted0 = Weighted.weighted(arborescence0, (-5.6791211345));
      TreeSet<Edge<Double>> treeSet1 = new TreeSet<Edge<Double>>();
      KBestArborescences.SubsetOfSolutions<Double> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<Double>(edge0, weighted0, treeSet1, treeSet1);
      List<Weighted<Arborescence<KBestArborescences.SubsetOfSolutions<Double>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<KBestArborescences.SubsetOfSolutions<Double>>) sparseWeightedGraph0, kBestArborescences_SubsetOfSolutions0, 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      ArrayList<Weighted<Edge<Object>>> arrayList0 = new ArrayList<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) priorityQueue0, (Iterable<Weighted<Edge<Object>>>) arrayList0);
      Double double0 = new Double(2305.9397646837965);
      KBestArborescences.getKBestArborescences((WeightedGraph<Object>) sparseWeightedGraph0, (Object) double0, 2);
      Stack<Edge<Integer>> stack0 = new Stack<Edge<Integer>>();
      int int0 = 2;
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(2);
      // Undeclared exception!
      try { 
        ImmutableSortedMap.of(integer0, integer0, integer1, integer1, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate keys in mappings 2=2 and 2=2
         //
         verifyException("com.google.common.collect.ImmutableSortedMap", e);
      }
  }
}
