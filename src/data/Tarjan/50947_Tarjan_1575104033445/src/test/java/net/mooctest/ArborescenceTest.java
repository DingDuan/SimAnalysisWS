/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:37:35 GMT 2019
 */

package net.mooctest;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;

import java.util.AbstractMap;

public class ArborescenceTest {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        Integer integer0 = new Integer(660);
        ImmutableBiMap<Object, Object> immutableBiMap0 = ImmutableBiMap.of((Object) integer0, (Object) integer0, (Object) "Q(&2`'XF&!8:>i5(", (Object) "Q(&2`'XF&!8:>i5(");
        Arborescence<Object> arborescence0 = Arborescence.of((ImmutableMap<Object, Object>) immutableBiMap0);
        // Undeclared exception!
        try {
            ImmutableMap.of(arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0, arborescence0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // duplicate key: Arborescence{660 -> 660, Q(&2`'XF&!8:>i5( -> Q(&2`'XF&!8:>i5(}
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        Arborescence<Arborescence<String>> arborescence0 = Arborescence.of((ImmutableMap<Arborescence<String>, Arborescence<String>>) null);
        // Undeclared exception!
        try {
            arborescence0.toString();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        Arborescence<Arborescence<Object>> arborescence0 = Arborescence.of((ImmutableMap<Arborescence<Object>, Arborescence<Object>>) null);
        Arborescence<Object> arborescence1 = Arborescence.of((ImmutableMap<Object, Object>) null);
        // Undeclared exception!
        try {
            arborescence1.equals(arborescence0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        Arborescence<Arborescence<Integer>> arborescence0 = Arborescence.of((ImmutableMap<Arborescence<Integer>, Arborescence<Integer>>) null);
        Arborescence<Integer> arborescence1 = Arborescence.empty();
        Edge<Arborescence<Integer>> edge0 = new Edge<Arborescence<Integer>>(arborescence1, arborescence1);
        // Undeclared exception!
        try {
            arborescence0.contains(edge0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Arborescence<Object> arborescence0 = Arborescence.empty();
        Object object0 = new Object();
        boolean boolean0 = arborescence0.equals(object0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Integer integer0 = new Integer((-1));
        AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Integer>("{}", integer0);
        ImmutableBiMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Integer>> immutableBiMap0 = ImmutableBiMap.of(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
        Arborescence<AbstractMap.SimpleEntry<String, Integer>> arborescence0 = Arborescence.of((ImmutableMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<String, Integer>>) immutableBiMap0);
        Edge<AbstractMap.SimpleEntry<String, Integer>> edge0 = new Edge<AbstractMap.SimpleEntry<String, Integer>>(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
        boolean boolean0 = arborescence0.contains(edge0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        Arborescence<String> arborescence0 = Arborescence.empty();
        boolean boolean0 = arborescence0.equals((Object) null);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        ImmutableMap<String, String> immutableMap0 = ImmutableMap.of(" -> ", " -> ", "M5#@Xq4BR?", "M5#@Xq4BR?");
        Arborescence<String> arborescence0 = Arborescence.of(immutableMap0);
        String string0 = arborescence0.toString();
        assertEquals("Arborescence{ ->  ->  -> , M5#@Xq4BR? -> M5#@Xq4BR?}", string0);
    }
    @Test(timeout = 4000)
    public void test8() throws Throwable {
        ImmutableMap<String, String> immutableMap0 = ImmutableMap.of(" -> ", " -> ", "M5#@Xq4BR?", "M5#@Xq4BR?");
        Arborescence<String> arborescence0 = Arborescence.of(immutableMap0);
        ImmutableMap<String, String> immutableMap1 = ImmutableMap.of(" -> ", " -> ", "M5#@Xq4BR?", "M5#@Xq4BR?");
        Arborescence<String> arborescence1 = Arborescence.of(immutableMap1);
        arborescence0.equals(arborescence1);
    }
}
