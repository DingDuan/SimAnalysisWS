/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:36:10 GMT 2019
 */

package net.mooctest;

import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.*;

import net.mooctest.DenseWeightedGraph;
import net.mooctest.Edge;
import net.mooctest.Weighted;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class DenseWeightedGraphTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Class<Locale.Category> class0 = Locale.Category.class;
        EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
        double[][] doubleArray0 = new double[2][6];
        DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
        Locale.Category locale_Category0 = Locale.Category.DISPLAY;
        Locale.Category locale_Category1 = Locale.Category.FORMAT;
        double double0 = denseWeightedGraph0.getWeightOf(locale_Category0, locale_Category1);
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Locale.Category locale_Category0 = Locale.Category.DISPLAY;
        EnumSet<Locale.Category> enumSet0 = EnumSet.range(locale_Category0, locale_Category0);
        double[][] doubleArray0 = new double[0][1];
        // Undeclared exception!
        try {
            DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        double[][] doubleArray0 = new double[4][8];
        double[] doubleArray1 = new double[0];
        doubleArray0[1] = doubleArray1;
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        Integer integer0 = new Integer(0);
        // Undeclared exception!
        try {
            denseWeightedGraph0.getIncomingEdges(integer0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch (ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        // Undeclared exception!
        try {
            DenseWeightedGraph.from((double[][]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
        // Undeclared exception!
        try {
            DenseWeightedGraph.from((Iterable<Object>) priorityQueue0, (double[][]) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        double[][] doubleArray0 = new double[5][4];
        // Undeclared exception!
        try {
            DenseWeightedGraph.from((Iterable<String>) null, doubleArray0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Locale.Category locale_Category0 = Locale.Category.FORMAT;
        Locale.Category locale_Category1 = Locale.Category.DISPLAY;
        EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1);
        Locale.Category locale_Category2 = Locale.Category.DISPLAY;
        EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2);
        double[][] doubleArray0 = new double[1][5];
        enumSet0.retainAll(enumSet1);
        DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
        Collection<Weighted<Edge<Locale.Category>>> collection0 = denseWeightedGraph0.getIncomingEdges(locale_Category2);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Vector<Integer> vector0 = new Vector<Integer>();
        double[][] doubleArray0 = new double[0][4];
        ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-5022));
        DenseWeightedGraph<Object> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Object>) arrayDeque0, doubleArray0);
        Collection<Weighted<Edge<Object>>> collection0 = denseWeightedGraph0.getIncomingEdges(vector0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Locale.Category locale_Category0 = Locale.Category.FORMAT;
        Locale.Category locale_Category1 = Locale.Category.DISPLAY;
        EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1);
        Locale.Category locale_Category2 = Locale.Category.DISPLAY;
        EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2);
        double[][] doubleArray0 = new double[1][5];
        enumSet0.retainAll(enumSet1);
        DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
        double double0 = denseWeightedGraph0.getWeightOf(locale_Category2, locale_Category0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        double[][] doubleArray0 = new double[0][4];
        ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>((-5022));
        DenseWeightedGraph<Object> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Object>) arrayDeque0, doubleArray0);
        Locale.Category locale_Category0 = Locale.Category.FORMAT;
        double double0 = denseWeightedGraph0.getWeightOf("net.mooctest.DenseWeightedGraph", locale_Category0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
        double[][] doubleArray0 = new double[3][7];
        // Undeclared exception!
        try {
            DenseWeightedGraph.from((Iterable<Object>) serviceLoader0, doubleArray0);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        double[][] doubleArray0 = new double[0][7];
        Class<String> class0 = String.class;
        ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
        DenseWeightedGraph<String> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<String>) serviceLoader0, doubleArray0);
        Collection<String> collection0 = denseWeightedGraph0.getNodes();
        assertNotNull(collection0);
    }

    private Method getMethod(Class clazz, String name, Class... parameters) throws Throwable {
        Method method = clazz.getDeclaredMethod(name, parameters);
        method.setAccessible(true);
        return method;
    }

    private Field getField(Class clazz, String fieldName) throws Throwable {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        ArrayList<Integer> nodes = new ArrayList<>();
        nodes.add(1);
        nodes.add(2);
        double[][] weights = new double[][]{{1, 1}, {1, 1}};
        DenseWeightedGraph denseWeightedGraph = DenseWeightedGraph.from(nodes, weights);
        Method getKBestArborescences = getMethod(KBestArborescences.class, "getKBestArborescences", WeightedGraph.class, int.class);
        getKBestArborescences.invoke(null, denseWeightedGraph, 5);
        KBestArborescences.getKBestArborescences(denseWeightedGraph,1,3);
    }
}
