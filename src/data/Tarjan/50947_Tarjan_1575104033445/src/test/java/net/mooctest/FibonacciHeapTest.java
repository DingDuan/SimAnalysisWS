/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:30:29 GMT 2019
 */

package net.mooctest;

import com.google.common.base.Optional;
import org.junit.Test;

import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Comparator;
import java.util.function.Consumer;

import org.evosuite.runtime.ViolatedAssumptionAnswer;

public class FibonacciHeapTest {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-485), (-485), (-514), (-1606)).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.pollOption();
        assertEquals(2, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-485), (-485), (-514), (-1606), 0).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.pollOption();
        assertEquals(3, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-485), (-535), 0).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.pollOption();
        assertEquals(2, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap0.MAX_CAPACITY);
        FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
        assertEquals(2, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, FibonacciHeap<String, Object>> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, Object> fibonacciHeap2 = FibonacciHeap.create((Comparator<? super Object>) comparator1);
        FibonacciHeap<Object, Object> fibonacciHeap3 = FibonacciHeap.merge(fibonacciHeap2, fibonacciHeap2);
        fibonacciHeap3.add(fibonacciHeap1, fibonacciHeap0);
        FibonacciHeap.merge(fibonacciHeap2, fibonacciHeap3);
        assertEquals(1, fibonacciHeap3.size());
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        Object object0 = new Object();
        fibonacciHeap0.add(fibonacciHeap0, object0);
        int int0 = fibonacciHeap0.size();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        // Undeclared exception!
        try {
            FibonacciHeap.merge((FibonacciHeap<Object, FibonacciHeap.Entry>) null, (FibonacciHeap<Object, FibonacciHeap.Entry>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap", e);
        }
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.create();
        // Undeclared exception!
        try {
            FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap1);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Heaps that use different comparators can't be merged.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        // Undeclared exception!
        try {
            fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, "2147483647");
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap$Entry", e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        // Undeclared exception!
        try {
            FibonacciHeap.create((Comparator<? super Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        Comparator<? super Object> comparator1 = fibonacciHeap0.comparator();
        FibonacciHeap<String, FibonacciHeap.Entry> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator1);
        // Undeclared exception!
        try {
            fibonacciHeap1.add("", (FibonacciHeap.Entry) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-485), (-485), (-485), 668).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) fibonacciHeap0.MAX_CAPACITY);
        fibonacciHeap0.pollOption();
        assertEquals(2, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add("2147483647", (Integer) Integer.MAX_VALUE);
        assertEquals(1, fibonacciHeap0.size());

        fibonacciHeap0.pollOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn((-485), 6, 6, (-485)).when(comparator0).compare(anyInt(), anyInt());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        fibonacciHeap0.pollOption();
        fibonacciHeap0.pollOption();
        assertEquals(1, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
        fibonacciHeap0.pollOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
        boolean boolean0 = fibonacciHeap0.isEmpty();
        assertEquals(0, fibonacciHeap0.size());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, Integer.MAX_VALUE);
        boolean boolean0 = fibonacciHeap0.isEmpty();
        assertEquals(1, fibonacciHeap0.size());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, (Integer) Integer.MAX_VALUE);
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        fibonacciHeap0.forEach(consumer0);
        assertEquals(1, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        int int0 = fibonacciHeap0.size();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        fibonacciHeap0.peekOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        // Undeclared exception!
        try {
            fibonacciHeap0.remove((FibonacciHeap.Entry) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap$Entry", e);
        }
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
        Comparator<? super String> comparator0 = fibonacciHeap0.comparator();
        FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.create(comparator0);
        fibonacciHeap1.iterator();
        assertEquals(0, fibonacciHeap1.size());
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, FibonacciHeap<String, Object>> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
        fibonacciHeap0.clear();
        assertEquals(0, fibonacciHeap0.size());
    }

    private Method getMethod(Class clazz, String name, Class... parameters) throws Throwable {
        Method method = clazz.getDeclaredMethod(name, parameters);
        method.setAccessible(true);
        return method;
    }

    private Field getField(Class clazz, String fieldName) throws Throwable {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        return field;
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        FibonacciHeap<Integer, Integer> fibonacciHeap = FibonacciHeap.create();
        Optional<FibonacciHeap<Integer, Integer>.Entry> entry = fibonacciHeap.add(1, 2);
        fibonacciHeap.decreasePriority(entry.get(), 1);
        Field size = getField(FibonacciHeap.class, "size");
        size.set(fibonacciHeap, Integer.MAX_VALUE);
        fibonacciHeap.add(2, 2);
        fibonacciHeap.remove(entry.get());
        Method cutAndMakeRoot = getMethod(FibonacciHeap.class, "cutAndMakeRoot", FibonacciHeap.Entry.class);
        cutAndMakeRoot.invoke(fibonacciHeap,entry.get());
    }
}
