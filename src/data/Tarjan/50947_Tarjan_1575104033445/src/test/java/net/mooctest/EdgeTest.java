/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:41:30 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import java.util.LinkedHashSet;
import java.util.Set;
import net.mooctest.Edge;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class EdgeTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Edge.from("net.mooctest.Edge$EdgeBuilder");
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Edge<Object> edge0 = new Edge<Object>(linkedHashSet0, (Object) null);
      linkedHashSet0.add(edge0);
      linkedHashSet0.add((Edge<Object>) null);
      linkedHashSet0.add((Edge<Object>) null);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-302));
      Edge<Integer> edge0 = new Edge<Integer>((Integer) null, integer0);
      edge0.equals(integer0);
      Edge<String> edge1 = new Edge<String>("'9iA@8m~E!", (String) null);
      Edge<String> edge2 = new Edge<String>("'9iA@8m~E!", (String) null);
      edge1.equals(edge2);
      Edge<Edge<String>> edge3 = new Edge<Edge<String>>(edge2, edge1);
      edge3.hashCode();
      edge3.hashCode();
      edge0.hashCode();
      edge2.equals(edge1);
      Integer integer1 = new Integer((-302));
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder0 = Edge.from(integer1);
      Integer integer2 = new Integer(0);
      edge_EdgeBuilder0.to(integer2);
      Edge<Edge<Object>> edge4 = new Edge<Edge<Object>>((Edge<Object>) null, (Edge<Object>) null);
      Edge.isAutoCycle();
      edge4.toString();
      LinkedHashSet<Edge<Object>> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Edge<Object>>((-302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -302
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      linkedHashSet0.add(edge0);
      Integer integer1 = new Integer(0);
      Edge<Integer> edge1 = new Edge<Integer>(integer1, integer1);
      linkedHashSet0.add(edge1);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Integer>>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: 0
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Object object0 = new Object();
      Edge<Object> edge0 = new Edge<Object>(linkedHashSet0, object0);
      Edge.isIn((Set<Edge<String>>) null);
      Edge<Object> edge1 = new Edge<Object>(linkedHashSet0, edge0);
      linkedHashSet0.add(edge1);
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-87));
      Edge<Integer> edge2 = new Edge<Integer>(integer0, integer1);
      boolean boolean0 = edge2.equals(edge1);
      assertFalse(edge1.equals((Object)edge0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("", "");
      edge0.equals("");
      Integer integer0 = new Integer(235);
      Edge<Integer> edge1 = new Edge<Integer>(integer0, integer0);
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Edge<Object> edge2 = new Edge<Object>((Object) null, "");
      linkedHashSet0.add(edge2);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value in entry: =null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Edge.isAutoCycle();
      Integer integer0 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      String string0 = edge0.toString();
      assertEquals("Edge{source=0, destination=0}", string0);
      
      Edge<Edge<Integer>> edge1 = new Edge<Edge<Integer>>(edge0, edge0);
      boolean boolean0 = edge1.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("net.mooctest.Edge$2", "net.mooctest.Edge$2");
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("<{YJ'+B/P8MI]z", "<{YJ'+B/P8MI]z");
      Edge<Object> edge1 = new Edge<Object>(edge0, edge0);
      boolean boolean0 = edge1.equals("<{YJ'+B/P8MI]z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Edge.isAutoCycle();
      Edge.isAutoCycle();
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) "pG60'P/");
      Edge<Object> edge0 = edge_EdgeBuilder0.to((Object) null);
      assertNotNull(edge0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("f[", "net.mooctest.Edge$EdgeBuilder");
      edge0.hashCode();
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Predicate<Edge<Integer>> predicate0 = Edge.isIn((Set<Edge<Integer>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Predicate<Edge<Object>> predicate0 = Edge.hasDestination((Object) "9navnYj0g");
      Edge<String> edge0 = new Edge<String>("[#JM<pi@ z;KFl", "9navnYj0g");
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Predicate<Edge<Object>> predicate1 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      Edge<Object> edge1 = new Edge<Object>(predicate0, predicate1);
      String string0 = edge1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2457);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      Edge.EdgeBuilder<Edge<Integer>> edge_EdgeBuilder0 = Edge.from(edge0);
      Edge<Edge<Integer>> edge1 = edge_EdgeBuilder0.to(edge0);
      assertNotNull(edge1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1140);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      edge0.equals(integer0);
      edge0.toString();
      Integer integer1 = edge0.destination;
      Edge<Object> edge1 = new Edge<Object>(integer1, edge0);
      edge1.equals(edge0);
      Edge.hasDestination(integer0);
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Predicate<Edge<String>> predicate0 = Edge.isIn((Set<Edge<String>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Edge<Object> edge0 = new Edge<Object>("ta'0Z J&PfW#f>_R&A", "ta'0Z J&PfW#f>_R&A");
      Edge.isAutoCycle();
      boolean boolean0 = edge0.equals("ta'0Z J&PfW#f>_R&A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge<String> edge0 = new Edge<String>("", "");
      linkedHashSet0.add(edge0);
      Predicate<Edge<String>> predicate0 = Edge.isIn((Set<Edge<String>>) linkedHashSet0);
      Edge<Integer> edge1 = new Edge<Integer>((Integer) null, (Integer) null);
      edge1.hashCode();
      Edge.from((Object) edge1);
      Predicate<Edge<String>> predicate1 = Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      edge0.hashCode();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<Edge<Edge<Integer>>> linkedHashSet0 = new LinkedHashSet<Edge<Edge<Integer>>>();
      Predicate<Edge<Edge<Integer>>> predicate0 = Edge.isIn((Set<Edge<Edge<Integer>>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Edge.from("m2mB@5q9UKIp!3cm");
      Predicate<Edge<Edge<Object>>> predicate0 = Edge.isAutoCycle();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Predicate<Edge<Integer>> predicate0 = Edge.competesWith((Set<Edge<Integer>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Predicate<Edge<String>> predicate0 = Edge.hasDestination("net.mooctest.Edge$2");
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("", "");
      String string0 = edge0.toString();
      assertEquals("Edge{source=, destination=}", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("A:t]1vT6 ", "Wg");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1169);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      edge0.toString();
      Edge<Object> edge1 = new Edge<Object>(integer0, edge0);
      edge1.equals(edge0);
      Edge.hasDestination(integer0);
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) null);
      Edge<Object> edge0 = new Edge<Object>((Object) null, edge_EdgeBuilder0);
      Edge<Edge<Object>> edge1 = new Edge<Edge<Object>>(edge0, edge0);
      edge1.toString();
      Edge<String> edge2 = new Edge<String>("Edge{source=Edge{source=null, destination=net.mooctest.Edge$EdgeBuilder@1}, destination=Edge{source=null, destination=net.mooctest.Edge$EdgeBuilder@1}}", "Edge{source=Edge{source=null, destination=net.mooctest.Edge$EdgeBuilder@1}, destination=Edge{source=null, destination=net.mooctest.Edge$EdgeBuilder@1}}");
      boolean boolean0 = edge0.equals(edge2);
      edge0.toString();
      Edge<Edge<String>> edge3 = new Edge<Edge<String>>(edge2, edge2);
      boolean boolean1 = edge3.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Edge<Object>> predicate0 = Edge.isAutoCycle();
      Edge<Object> edge0 = new Edge<Object>(predicate0, predicate0);
      Object object0 = new Object();
      Edge.EdgeBuilder<String> edge_EdgeBuilder0 = Edge.from("");
      Edge<String> edge1 = edge_EdgeBuilder0.to("");
      Edge.isAutoCycle();
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      linkedHashSet0.add(edge0);
      Predicate<Edge<Object>> predicate1 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      edge1.toString();
      Edge<Integer> edge2 = new Edge<Integer>((Integer) null, (Integer) null);
      edge2.equals("GO&9,R!UNM9(x");
      Edge.hasDestination("");
      Edge.isAutoCycle();
      Predicate<Edge<Object>> predicate2 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      assertNotSame(predicate2, predicate1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("'i@8m~E!", "'i@8m~E!");
      Edge<String> edge1 = new Edge<String>("'i@8m~E!", "'i@8m~E!");
      edge1.equals(edge0);
      Predicate<Edge<Integer>> predicate0 = Edge.isAutoCycle();
      Object object0 = new Object();
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Predicate<Edge<Integer>> predicate1 = Edge.isIn((Set<Edge<Integer>>) linkedHashSet0);
      assertFalse(predicate1.equals((Object)predicate0));
  }
}
