/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:38:51 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import net.mooctest.Partition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class PartitionTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("Z-f;75s]OCq3E Y");
      assertTrue(linkedList0.contains("Z-f;75s]OCq3E Y"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("Z-f;75s]OCq3E Y"));
      assertEquals(1, linkedList0.size());
      
      String string0 = partition0.merge("Z-f;75s]OCq3E Y", "Z-f;75s]OCq3E Y");
      assertNotNull(string0);
      assertTrue(linkedList0.contains("Z-f;75s]OCq3E Y"));
      assertEquals("Z-f;75s]OCq3E Y", string0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("net.mooctest.Partition");
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("Z-f;o5s]OCq3E Y");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertEquals(2, linkedList0.size());
      
      String string0 = partition0.merge("Z-f;o5s]OCq3E Y", "net.mooctest.Partition");
      assertNotNull(string0);
      assertTrue(linkedList0.contains("Z-f;o5s]OCq3E Y"));
      assertEquals("Z-f;o5s]OCq3E Y", string0);
      assertEquals(2, linkedList0.size());
      
      String string1 = partition0.merge("net.mooctest.Partition", "net.mooctest.Partition");
      assertNotNull(string1);
      assertTrue(linkedList0.contains(string0));
      assertEquals("Z-f;o5s]OCq3E Y", string1);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("net.mooctest.Partition");
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      assertNotNull(partition0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = partition0.sameComponent("net.mooctest.Partition", "net.mooctest.Partition");
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains("net.mooctest.Partition"));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      assertNotNull(partition0);
      assertFalse(linkedList0.contains(object0));
      assertEquals(0, linkedList0.size());
      
      Set<Object> set0 = partition0.getNodes();
      assertNotNull(set0);
      assertFalse(linkedList0.contains(object0));
      assertFalse(set0.contains(object0));
      assertEquals(0, linkedList0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        partition0.sameComponent(object0, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      assertNotNull(partition0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        partition0.merge(object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      assertNotNull(partition0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        partition0.componentOf(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("net.mooctest.Partition");
      linkedList0.add("Z-f;75s]OCq3E Y");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("Z-f;75s]OCq3E Y", "net.mooctest.Partition");
      assertEquals("Z-f;75s]OCq3E Y", string0);
      
      String string1 = partition0.componentOf("net.mooctest.Partition");
      assertEquals("Z-f;75s]OCq3E Y", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[\"");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.componentOf("[\"");
      assertTrue(linkedList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[\"");
      linkedList0.add("9>Tn\"E");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("9>Tn\"E", "[\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("pVJ;4xGP}");
      linkedList0.add("C-gka0\"?K\"4QvXg$@MD");
      linkedList0.add("ZKf;o5sOCq3G Y");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("ZKf;o5sOCq3G Y", "C-gka0\"?K\"4QvXg$@MD");
      assertEquals("ZKf;o5sOCq3G Y", string0);
      
      String string1 = partition0.merge("pVJ;4xGP}", "C-gka0\"?K\"4QvXg$@MD");
      assertEquals("ZKf;o5sOCq3G Y", string1);
  }
}
