/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:27:47 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FibonacciQueue_ESTest{

    @Test(timeout = 4000)
    public void test0()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
        int int0 = fibonacciQueue0.size();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test1()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<FibonacciHeap.Entry> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue1 = FibonacciQueue.create((Comparator<? super Object>) comparator1);
        fibonacciQueue1.offer(fibonacciQueue0);
        int int0 = fibonacciQueue1.size();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test2()  throws Throwable  {
        FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
        Integer integer0 = fibonacciQueue0.poll();
        assertNull(integer0);
    }

    ////////////////////////
    ///////////////////
    ////
    @Test(timeout = 4000)
    public void test3()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super String>) comparator0);
        Comparator<? super String> comparator1 = fibonacciQueue0.comparator();
        Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue1 = FibonacciQueue.create((Comparator<? super Object>) comparator2);
        fibonacciQueue1.offer(comparator1);
        Object object0 = fibonacciQueue1.poll();
        //assertFalse(fibonacciQueue1.contains(object0));
    }

    @Test(timeout = 4000)
    public void test4()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
        Integer integer0 = new Integer(10);
        fibonacciQueue0.add(integer0);
//        FibonacciQueue fibonacciQueue1 = (FibonacciQueue)fibonacciQueue0.peek();
        // Undeclared exception!
//        try {
//            fibonacciQueue1.poll();
//            fail("Expecting exception: IllegalArgumentException");
//
//        } catch(IllegalArgumentException e) {
//        }
    }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
        // Undeclared exception!
        try {
            fibonacciQueue0.offer((Object) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        // Undeclared exception!
        try {
            FibonacciQueue.create((Comparator<? super String>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
        Object object0 = fibonacciQueue0.peek();
        assertNull(object0);
    }

//    @Test(timeout = 4000)
//    public void test8()  throws Throwable  {
//        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
//        FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
//        Iterator<Object> iterator0 = fibonacciQueue0.iterator();
//        FibonacciQueue<Integer> fibonacciQueue1 = FibonacciQueue.create();
//        Integer integer0 = new Integer(0);
//        boolean boolean0 = fibonacciQueue1.add(integer0);
//        boolean boolean1 = fibonacciQueue1.contains(iterator0);
//        assertFalse(boolean1 == boolean0);
//    }
}
