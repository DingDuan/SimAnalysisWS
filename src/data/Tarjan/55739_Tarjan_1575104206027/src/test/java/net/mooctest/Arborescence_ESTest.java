/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:14:27 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import java.util.AbstractMap;
import java.util.SortedMap;
import java.util.TreeMap;
import net.mooctest.Arborescence;
import net.mooctest.Edge;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Arborescence_ESTest  {


    @Test(timeout = 4000)
    public void test011111()  throws Throwable  {
        Arborescence<Object> arborescence0 = Arborescence.of((ImmutableMap<Object, Object>) null);
        // Undeclared exception!
        try {
            arborescence0.toString();
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test011112()  throws Throwable  {
        Arborescence<AbstractMap.SimpleEntry<Object, Object>> arborescence0 = Arborescence.of((ImmutableMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>) null);
        Arborescence<AbstractMap.SimpleImmutableEntry<Object, String>> arborescence1 = Arborescence.of((ImmutableMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
        // Undeclared exception!
        try {
            arborescence1.equals(arborescence0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test011113()  throws Throwable  {
        Arborescence<Arborescence<Integer>> arborescence0 = Arborescence.of((ImmutableMap<Arborescence<Integer>, Arborescence<Integer>>) null);
        Arborescence<Integer> arborescence1 = Arborescence.empty();
        Edge<Arborescence<Integer>> edge0 = new Edge<Arborescence<Integer>>(arborescence1, arborescence1);
        // Undeclared exception!
        try {
            arborescence0.contains(edge0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.Arborescence", e);
        }
    }

    @Test(timeout = 4000)
    public void test401111()  throws Throwable  {
        Arborescence<Integer> arborescence0 = Arborescence.empty();
        Arborescence<Arborescence<Integer>> arborescence1 = Arborescence.empty();
        boolean boolean0 = arborescence0.equals(arborescence1);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test011115()  throws Throwable  {
        TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
        treeMap0.put("", "");
        ImmutableSortedMap<String, String> immutableSortedMap0 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends String>) treeMap0);
        Arborescence<String> arborescence0 = Arborescence.of((ImmutableMap<String, String>) immutableSortedMap0);
        Edge<String> edge0 = new Edge<String>("Arborescence{}", "");
        boolean boolean0 = arborescence0.contains(edge0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test011116()  throws Throwable  {
        Arborescence<Integer> arborescence0 = Arborescence.empty();
        Arborescence<Arborescence<Integer>> arborescence1 = Arborescence.empty();
        Edge<Arborescence<Integer>> edge0 = new Edge<Arborescence<Integer>>(arborescence0, arborescence0);
        boolean boolean0 = arborescence1.contains(edge0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test011117()  throws Throwable  {
        Arborescence<Integer> arborescence0 = Arborescence.empty();
        arborescence0.hashCode();
    }
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Arborescence<Object> arborescence0 = Arborescence.empty();
      AbstractMap.SimpleEntry<Arborescence<Object>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Arborescence<Object>, Object>(arborescence0, arborescence0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Arborescence<Object> arborescence0 = Arborescence.of((ImmutableMap<Object, Object>) null);
      // Undeclared exception!
      try { 
        arborescence0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Arborescence", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Arborescence<AbstractMap.SimpleEntry<Object, Object>> arborescence0 = Arborescence.of((ImmutableMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>) null);
      Arborescence<AbstractMap.SimpleImmutableEntry<Object, String>> arborescence1 = Arborescence.of((ImmutableMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) null);
      // Undeclared exception!
      try { 
        arborescence1.equals(arborescence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Arborescence", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Arborescence<Arborescence<Integer>> arborescence0 = Arborescence.of((ImmutableMap<Arborescence<Integer>, Arborescence<Integer>>) null);
      Arborescence<Integer> arborescence1 = Arborescence.empty();
      Edge<Arborescence<Integer>> edge0 = new Edge<Arborescence<Integer>>(arborescence1, arborescence1);
      // Undeclared exception!
      try { 
        arborescence0.contains(edge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Arborescence", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Arborescence<Arborescence<Integer>> arborescence1 = Arborescence.empty();
      boolean boolean0 = arborescence0.equals(arborescence1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("", "");
      ImmutableSortedMap<String, String> immutableSortedMap0 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends String>) treeMap0);
      Arborescence<String> arborescence0 = Arborescence.of((ImmutableMap<String, String>) immutableSortedMap0);
      Edge<String> edge0 = new Edge<String>("Arborescence{}", "");
      boolean boolean0 = arborescence0.contains(edge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Arborescence<Arborescence<Integer>> arborescence1 = Arborescence.empty();
      Edge<Arborescence<Integer>> edge0 = new Edge<Arborescence<Integer>>(arborescence0, arborescence0);
      boolean boolean0 = arborescence1.contains(edge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      arborescence0.hashCode();
  }
}
