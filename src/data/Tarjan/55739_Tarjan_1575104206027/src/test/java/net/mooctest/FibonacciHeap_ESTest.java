/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:04:33 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class FibonacciHeap_ESTest {

    @Test(timeout = 4000)
    public void  testk() throws Throwable {

    }

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, "Cannot incrase pGiority");
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "DnO!rUea5%FGJd{@~");
        FibonacciHeap<String, Object> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        fibonacciHeap0.add((Integer) fibonacciHeap1.MAX_CAPACITY, "Cannot incrase pGiority");
        fibonacciHeap0.pollOption();
        assertEquals(4, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
        FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.create();
        fibonacciHeap1.add((Integer) fibonacciHeap0.MAX_CAPACITY, "g?6T");
        fibonacciHeap1.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap1.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap1.add((Integer) Integer.MAX_VALUE, "Cannot incrase pGiority");
        fibonacciHeap1.add((Integer) fibonacciHeap0.MAX_CAPACITY, "Cannot incrase pGiority");
        fibonacciHeap1.pollOption();
        assertEquals(4, fibonacciHeap1.size());
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, "");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "St1AGY`G<g");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "St1AGY`G<g");
        fibonacciHeap0.pollOption();
        assertEquals(4, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, "Cannot increase priority");
        FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
        assertEquals(2, fibonacciHeap0.size());
        assertEquals(4, fibonacciHeap1.size());
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "Ordering.natural().reverse()");
        FibonacciHeap<Integer, String> fibonacciHeap1 = FibonacciHeap.create();
        FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
        assertEquals(1, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        FibonacciHeap<Integer, Object> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
        FibonacciHeap<Integer, Object> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
        assertNotSame(fibonacciHeap2, fibonacciHeap1);
        assertEquals(0, fibonacciHeap2.size());
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        fibonacciHeap0.add("n!VL40_hLRR5", "n!VL40_hLRR5");
        int int0 = fibonacciHeap0.size();
        assertEquals(1, int0);
    }
///////////////////////////////
    //////////////
    ///
    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create();
        //fibonacciHeap0.iterator();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        // Undeclared exception!
        try {
            FibonacciHeap.merge((FibonacciHeap<Integer, FibonacciHeap.Entry>) null, (FibonacciHeap<Integer, FibonacciHeap.Entry>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap", e);
        }
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        Comparator<? super Object> comparator1 = fibonacciHeap0.comparator();
        FibonacciHeap<Object, String> fibonacciHeap1 = FibonacciHeap.create();
        FibonacciHeap<Object, String> fibonacciHeap2 = FibonacciHeap.create((Comparator<? super String>) comparator1);
        // Undeclared exception!
        try {
            FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap2);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // Heaps that use different comparators can't be merged.
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, FibonacciHeap<String, Object>> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
        Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, Object> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super Object>) comparator1);
        // Undeclared exception!
        try {
            fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, fibonacciHeap1);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap$Entry", e);
        }
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        // Undeclared exception!
        try {
            FibonacciHeap.create((Comparator<? super Integer>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
        // Undeclared exception!
        try {
            fibonacciHeap0.add("", (FibonacciHeap.Entry) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "net.mooctest.FibonacclHeap$1");
        assertEquals(1, fibonacciHeap0.size());

        fibonacciHeap0.pollOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
        fibonacciHeap0.pollOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
        boolean boolean0 = fibonacciHeap0.isEmpty();
        assertEquals(0, fibonacciHeap0.size());
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "com.google.common.collect.Iterators$MergingIterator");
        boolean boolean0 = fibonacciHeap0.isEmpty();
        assertEquals(1, fibonacciHeap0.size());
        assertFalse(boolean0);
    }

    ////////////////////////////
    //////////////////
    @Test(timeout = 4000)
    public void test17()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "net.moctesioncciHeap");
        Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
        //fibonacciHeap0.forEach(consumer0);
        assertEquals(1, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test18()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        int int0 = fibonacciHeap0.size();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test19()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
        fibonacciHeap0.peekOption();
        assertEquals(0, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test20()  throws Throwable  {
        FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "com.google.common.collect.Iterators$MergingIterator");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "com.google.common.collect.Iterators$MergingIterator");
        fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "net.mooctest.FibonacciHeap$Entry");
        fibonacciHeap0.pollOption();
        fibonacciHeap0.pollOption();
        assertEquals(1, fibonacciHeap0.size());
    }

    @Test(timeout = 4000)
    public void test21()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
        // Undeclared exception!
        try {
            fibonacciHeap0.remove((FibonacciHeap.Entry) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.FibonacciHeap$Entry", e);
        }
    }

    @Test(timeout = 4000)
    public void test22()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
        fibonacciHeap0.clear();
        assertEquals(0, fibonacciHeap0.size());
    }
}
