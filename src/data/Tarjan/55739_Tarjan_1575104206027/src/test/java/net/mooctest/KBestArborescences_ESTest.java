/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:00:16 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableMap;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class KBestArborescences_ESTest  {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        PriorityQueue<Double> priorityQueue0 = new PriorityQueue<Double>();
        LinkedHashSet<Weighted<Edge<Double>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Double>>>();
        SparseWeightedGraph<Double> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Double>) priorityQueue0, (Iterable<Weighted<Edge<Double>>>) linkedHashSet0);
        TreeSet<Edge<Double>> treeSet0 = new TreeSet<Edge<Double>>();
        Arborescence<Double> arborescence0 = Arborescence.empty();
        Weighted<Arborescence<Double>> weighted0 = Weighted.weighted(arborescence0, 0.0);
        Optional<Weighted<KBestArborescences.SubsetOfSolutions<Double>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Double>) sparseWeightedGraph0, (Set<Edge<Double>>) treeSet0, (Set<Edge<Double>>) treeSet0, weighted0);
        assertNotNull(optional0);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        Arborescence<Object> arborescence0 = Arborescence.of((ImmutableMap<Object, Object>) null);
        ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of((Edge<Object>) null, 0.0);
        // Undeclared exception!
        try {
            KBestArborescences.seek(exclusiveEdge0, arborescence0, (EdgeQueueMap.EdgeQueue<Object>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        TreeSet<Edge<Double>> treeSet0 = new TreeSet<Edge<Double>>();
        Arborescence<Double> arborescence0 = Arborescence.empty();
        Weighted<Arborescence<Double>> weighted0 = Weighted.weighted(arborescence0, 1152.899499294727);
        // Undeclared exception!
        try {
            KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Double>) null, (Set<Edge<Double>>) treeSet0, (Set<Edge<Double>>) treeSet0, weighted0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.KBestArborescences", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        HashSet<Edge<Double>> hashSet0 = new HashSet<Edge<Double>>();
        Arborescence<Double> arborescence0 = Arborescence.empty();
        Edge<Double> edge0 = (Edge<Double>) mock(Edge.class, new ViolatedAssumptionAnswer());
        hashSet0.add(edge0);
        Weighted<Arborescence<Double>> weighted0 = new Weighted<Arborescence<Double>>(arborescence0, 0.0);
        // Undeclared exception!
        try {
            KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Double>) null, (Set<Edge<Double>>) hashSet0, (Set<Edge<Double>>) hashSet0, weighted0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // null key in entry: null=null
            //
            assertEquals("null key in entry: null=null",e.getMessage());
        }
    }


    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        double[][] doubleArray0 = new double[6][4];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        HashSet<Edge<Integer>> hashSet0 = new HashSet<Edge<Integer>>();
        Arborescence<Integer> arborescence0 = Arborescence.empty();
        Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, 0.0);
        // Undeclared exception!
        try {
            KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) hashSet0, (Set<Edge<Integer>>) hashSet0, weighted0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        Integer integer0 = new Integer(0);
        // Undeclared exception!
        try {
            KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) null, integer0, (-2432));
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.KBestArborescences", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        double[][] doubleArray0 = new double[9][0];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        Integer integer0 = new Integer((-2534));
        // Undeclared exception!
        try {
            KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, (-2534));
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
        Arborescence<Object> arborescence0 = Arborescence.empty();
        Stack<Edge<Object>> stack0 = new Stack<Edge<Object>>();
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        Partition<Object> partition0 = Partition.singletons((Collection<Object>) treeSet0);
        EdgeQueueMap.EdgeQueue<Object> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Object) stack0, partition0);
        ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, 2903.581167022629);
        Optional<ExclusiveEdge<Object>> optional0 = KBestArborescences.seek(exclusiveEdge0, arborescence0, (EdgeQueueMap.EdgeQueue<Object>) edgeQueueMap_EdgeQueue0);
        assertNotNull(optional0);
    }

//    @Test(timeout = 4000)
//    public void test09()  throws Throwable  {
//        double[][] doubleArray0 = new double[4][5];
//        double[] doubleArray1 = new double[6];
//        doubleArray1[2] = (double) 1;
//        doubleArray0[0] = doubleArray1;
//        doubleArray0[3] = doubleArray1;
//        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
//        Integer integer0 = new Integer(1);
//        List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 660);
//        assertEquals(16, list0.size());
//    }

//    @Test(timeout = 4000)
//    public void test10()  throws Throwable  {
//        double[][] doubleArray0 = new double[5][5];
//        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
//        Integer integer0 = new Integer(1);
//        List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 2);
//        assertEquals(2, list0.size());
//    }

//    @Test(timeout = 4000)
//    public void test11()  throws Throwable  {
//        double[][] doubleArray0 = new double[5][5];
//        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
//        Integer integer0 = Integer.valueOf(1);
//        List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 1);
//        assertEquals(1, list0.size());
//    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        Stack<Edge<Object>> stack0 = new Stack<Edge<Object>>();
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        Partition<Object> partition0 = Partition.singletons((Collection<Object>) treeSet0);
        EdgeQueueMap.EdgeQueue<Object> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Object) stack0, partition0);
        LinkedList<Weighted<Edge<Pair<Object, Object>>>> linkedList0 = new LinkedList<Weighted<Edge<Pair<Object, Object>>>>();
        SparseWeightedGraph<Pair<Object, Object>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Pair<Object, Object>>>>) linkedList0);
        Pair<Object, Object> pair0 = new Pair<Object, Object>(edgeQueueMap_EdgeQueue0, treeSet0);
        List<Weighted<Arborescence<Pair<Object, Object>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Pair<Object, Object>>) sparseWeightedGraph0, pair0, (-1829));
        assertEquals(0, list0.size());
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        KBestArborescences kBestArborescences0 = new KBestArborescences();
    }

//    @Test(timeout = 4000)
//    public void test14()  throws Throwable  {
//        double[][] doubleArray0 = new double[5][5];
//        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
//        Integer integer0 = new Integer(1);
//        // Undeclared exception!
//        KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 587);
//    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
        Arborescence<Object> arborescence0 = Arborescence.empty();
        Weighted<Arborescence<Object>> weighted0 = new Weighted<Arborescence<Object>>(arborescence0, Double.POSITIVE_INFINITY);
        LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
        KBestArborescences.SubsetOfSolutions<Object> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<Object>(edge0, weighted0, linkedHashSet0, linkedHashSet0);
    }
}
