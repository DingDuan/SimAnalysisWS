/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:26:07 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Locale;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class WeightedGraph_ESTest  {

    @Test(timeout = 4000)
    public void test0()  throws Throwable  {
        HashSet<String> hashSet0 = new HashSet<String>();
        double[][] doubleArray0 = new double[1][1];
        hashSet0.add("%s");
        DenseWeightedGraph<String> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<String>) hashSet0, doubleArray0);
        double double0 = denseWeightedGraph0.getWeightOf("%s", "%s");
        assertEquals(0.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test1()  throws Throwable  {
        TreeSet<Weighted<Edge<Integer>>> treeSet0 = new TreeSet<Weighted<Edge<Integer>>>();
        Integer integer0 = new Integer(4129);
        Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
        Weighted<Edge<Integer>> weighted0 = new Weighted<Edge<Integer>>(edge0, 4129);
        treeSet0.add(weighted0);
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) treeSet0);
        double double0 = sparseWeightedGraph0.getWeightOf(integer0, integer0);
        assertEquals(4129.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test2()  throws Throwable  {
        ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
        Vector<Weighted<Edge<Object>>> vector0 = new Vector<Weighted<Edge<Object>>>();
        SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) arrayDeque0, (Iterable<Weighted<Edge<Object>>>) vector0);
        Object object0 = new Object();
        double double0 = sparseWeightedGraph0.getWeightOf(object0, vector0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test3()  throws Throwable  {
        HashSet<Weighted<Edge<Edge<Locale.Category>>>> hashSet0 = new HashSet<Weighted<Edge<Edge<Locale.Category>>>>(0);
        SparseWeightedGraph<Edge<Locale.Category>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Edge<Locale.Category>>>>) hashSet0);
        Collection<Edge<Locale.Category>> collection0 = sparseWeightedGraph0.getNodes();
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test4()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        TreeSet<Weighted<Edge<Integer>>> treeSet0 = new TreeSet<Weighted<Edge<Integer>>>(comparator0);
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) treeSet0);
        Integer integer0 = new Integer(863);
        Collection<Weighted<Edge<Integer>>> collection0 = sparseWeightedGraph0.getIncomingEdges(integer0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test5()  throws Throwable  {
        double[][] doubleArray0 = new double[9][4];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        Integer integer0 = new Integer(1);
        Integer integer1 = new Integer(8);
        // Undeclared exception!
        try {
            denseWeightedGraph0.getWeightOf(integer0, integer1);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 8
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test6()  throws Throwable  {
        double[] doubleArray0 = new double[1];
        double[][] doubleArray1 = new double[3][2];
        doubleArray1[0] = doubleArray0;
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray1);
        Integer integer0 = new Integer(1);
        // Undeclared exception!
        try {
            denseWeightedGraph0.getIncomingEdges(integer0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 1
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test7()  throws Throwable  {
        double[][] doubleArray0 = new double[9][4];
        double[] doubleArray1 = new double[0];
        doubleArray0[6] = doubleArray1;
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        // Undeclared exception!
        try {
            denseWeightedGraph0.filterEdges((Predicate<Edge<Integer>>) null);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 0
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test8()  throws Throwable  {
        TreeSet<Weighted<Edge<Integer>>> treeSet0 = new TreeSet<Weighted<Edge<Integer>>>();
        Integer integer0 = new Integer(0);
        Integer integer1 = new Integer((-1445));
        Edge<Integer> edge0 = new Edge<Integer>(integer0, integer1);
        Weighted<Edge<Integer>> weighted0 = Weighted.weighted(edge0, (double) 0);
        treeSet0.add(weighted0);
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) treeSet0);
        // Undeclared exception!
        try {
            sparseWeightedGraph0.filterEdges((Predicate<Edge<Integer>>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.WeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test9()  throws Throwable  {
        TreeSet<Weighted<Edge<Integer>>> treeSet0 = new TreeSet<Weighted<Edge<Integer>>>();
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) treeSet0);
        WeightedGraph<Integer> weightedGraph0 = sparseWeightedGraph0.filterEdges((Predicate<Edge<Integer>>) null);
        assertNotNull(weightedGraph0);
    }
}
