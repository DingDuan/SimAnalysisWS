/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:23:08 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ChuLiuEdmonds_ESTest {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        ArrayDeque<Weighted<Edge<String>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<String>>>();
        SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) arrayDeque0);
        HashSet<Edge<String>> hashSet0 = new HashSet<Edge<String>>();
        LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>(1081);
        Weighted<Arborescence<String>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<String>) sparseWeightedGraph0, (Set<Edge<String>>) hashSet0, (Set<Edge<String>>) linkedHashSet0);
        assertEquals(0.0, weighted0.weight, 0.01);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        ArrayList<Object> arrayList0 = new ArrayList<Object>(1155);
        LinkedHashSet<Weighted<Edge<Object>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Object>>>();
        SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) arrayList0, (Iterable<Weighted<Edge<Object>>>) linkedHashSet0);
        ChuLiuEdmonds.PartialSolution<Object> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Object>) sparseWeightedGraph0);
        Integer integer0 = Integer.valueOf(1155);
        Edge<Object> edge0 = new Edge<Object>(integer0, chuLiuEdmonds_PartialSolution0);
        Vector<Edge<Object>> vector0 = new Vector<Edge<Object>>();
        ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, (List<Edge<Object>>) vector0, 3333.7);
        // Undeclared exception!
        try {
            chuLiuEdmonds_PartialSolution0.addEdge(exclusiveEdge0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        TreeSet<Edge<ExclusiveEdge<Weighted<Edge<Object>>>>> treeSet0 = new TreeSet<Edge<ExclusiveEdge<Weighted<Edge<Object>>>>>();
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<ExclusiveEdge<Weighted<Edge<Object>>>>) null, (Set<Edge<ExclusiveEdge<Weighted<Edge<Object>>>>>) treeSet0, (Set<Edge<ExclusiveEdge<Weighted<Edge<Object>>>>>) treeSet0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.ChuLiuEdmonds", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
        Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(arrayDeque0);
        double[][] doubleArray0 = new double[0][2];
        DenseWeightedGraph<Locale.FilteringMode> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.FilteringMode>) vector0, doubleArray0);
        LinkedHashSet<Edge<Locale.FilteringMode>> linkedHashSet0 = new LinkedHashSet<Edge<Locale.FilteringMode>>();
        Edge<Locale.FilteringMode> edge0 = (Edge<Locale.FilteringMode>) mock(Edge.class, new ViolatedAssumptionAnswer());
        linkedHashSet0.add(edge0);
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.FilteringMode>) denseWeightedGraph0, (Set<Edge<Locale.FilteringMode>>) linkedHashSet0, (Set<Edge<Locale.FilteringMode>>) linkedHashSet0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // null key in entry: null=null
            //
            assertEquals("null key in entry: null=null",e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        double[][] doubleArray0 = new double[6][0];
        double[] doubleArray1 = new double[3];
        doubleArray0[0] = doubleArray1;
        doubleArray0[1] = doubleArray0[0];
        doubleArray0[2] = doubleArray0[1];
        doubleArray0[3] = doubleArray0[2];
        doubleArray0[4] = doubleArray0[3];
        doubleArray0[5] = doubleArray0[2];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        TreeSet<Edge<Integer>> treeSet0 = new TreeSet<Edge<Integer>>();
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) treeSet0, (Set<Edge<Integer>>) treeSet0);
            fail("Expecting exception: ClassCastException");

        } catch(ClassCastException e) {
            //
            // net.mooctest.Edge cannot be cast to java.lang.Comparable
            //
            verifyException("java.util.TreeMap", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        double[][] doubleArray0 = new double[5][6];
        double[] doubleArray1 = new double[3];
        doubleArray0[3] = doubleArray1;
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        HashSet<Edge<Integer>> hashSet0 = new HashSet<Edge<Integer>>();
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) hashSet0, (Set<Edge<Integer>>) hashSet0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 3
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        double[][] doubleArray0 = new double[8][2];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        Integer integer0 = new Integer(1);
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 2
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.FilteringMode>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.ChuLiuEdmonds", e);
        }
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        double[][] doubleArray0 = new double[7][4];
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");

        } catch(ArrayIndexOutOfBoundsException e) {
            //
            // 4
            //
            verifyException("net.mooctest.DenseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        ArrayList<Arborescence<Integer>> arrayList0 = new ArrayList<Arborescence<Integer>>(87855567);
        LinkedHashSet<Weighted<Edge<Arborescence<Integer>>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Arborescence<Integer>>>>();
        SparseWeightedGraph<Arborescence<Integer>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Arborescence<Integer>>) arrayList0, (Iterable<Weighted<Edge<Arborescence<Integer>>>>) linkedHashSet0);
        ChuLiuEdmonds.PartialSolution<Arborescence<Integer>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Arborescence<Integer>>) sparseWeightedGraph0);
        Set<Arborescence<Integer>> set0 = chuLiuEdmonds_PartialSolution0.getNodes();
        assertEquals(0, set0.size());
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(87855567);
        double[][] doubleArray0 = new double[1][2];
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        vector0.add(locale_FilteringMode0);
        DenseWeightedGraph<Locale.FilteringMode> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.FilteringMode>) vector0, doubleArray0);
        ChuLiuEdmonds.PartialSolution<Locale.FilteringMode> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Locale.FilteringMode>) denseWeightedGraph0);
        ImmutableSortedMap<Locale.FilteringMode, Locale.FilteringMode> immutableSortedMap0 = ImmutableSortedMap.of();
        Arborescence<Locale.FilteringMode> arborescence0 = Arborescence.of((ImmutableMap<Locale.FilteringMode, Locale.FilteringMode>) immutableSortedMap0);
        Optional<ExclusiveEdge<Locale.FilteringMode>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(locale_FilteringMode0, arborescence0);
        assertNotNull(optional0);
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        double[][] doubleArray0 = new double[2][6];
        double[] doubleArray1 = new double[2];
        doubleArray1[0] = Double.NEGATIVE_INFINITY;
        doubleArray0[0] = doubleArray1;
        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
        ChuLiuEdmonds.PartialSolution<Integer> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) denseWeightedGraph0);
        assertNotNull(chuLiuEdmonds_PartialSolution0);
    }

//    @Test(timeout = 4000)
//    public void test12()  throws Throwable  {
//        double[][] doubleArray0 = new double[2][9];
//        DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
//        Integer integer0 = new Integer((1249));
//        Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
//        assertEquals(0.0, weighted0.weight, 0.01);
//    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0);
        LinkedList<Weighted<Edge<Locale.FilteringMode>>> linkedList0 = new LinkedList<Weighted<Edge<Locale.FilteringMode>>>();
        SparseWeightedGraph<Locale.FilteringMode> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Locale.FilteringMode>) enumSet0, (Iterable<Weighted<Edge<Locale.FilteringMode>>>) linkedList0);
        Weighted<Arborescence<Locale.FilteringMode>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.FilteringMode>) sparseWeightedGraph0);
        assertEquals(0.0, weighted0.weight, 0.01);
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        PriorityQueue<Weighted<Edge<Integer>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Integer>>>(comparator0);
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) priorityQueue0);
        ChuLiuEdmonds.PartialSolution<Integer> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) sparseWeightedGraph0);
        Integer integer0 = new Integer(887);
        Optional<ExclusiveEdge<Integer>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(integer0);
        assertNotNull(optional0);
    }

    @Test(timeout = 4000)
    public void test15()  throws Throwable  {
        Edge<Object> edge0 = new Edge<Object>((Object) null, (Object) null);
        Weighted<Edge<Object>> weighted0 = Weighted.weighted(edge0, 3428.3470985523413);
        // Undeclared exception!
        try {
            ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Weighted<Edge<Object>>>) null, weighted0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.ChuLiuEdmonds", e);
        }
    }

    @Test(timeout = 4000)
    public void test16()  throws Throwable  {
        ChuLiuEdmonds chuLiuEdmonds0 = new ChuLiuEdmonds();
    }
}
