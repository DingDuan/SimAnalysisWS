/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:08:00 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class SparseWeightedGraph_ESTest{

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
        TreeSet<Weighted<Edge<String>>> treeSet0 = new TreeSet<Weighted<Edge<String>>>();
        Edge<String> edge0 = new Edge<String>("com.gogle.common.collect.SingletonImmutableSet", "com.gogle.common.collect.SingletonImmutableSet");
        Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, 40.0);
        treeSet0.add(weighted0);
        SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) arrayDeque0, (Iterable<Weighted<Edge<String>>>) treeSet0);
        double double0 = sparseWeightedGraph0.getWeightOf("com.gogle.common.collect.SingletonImmutableSet", "com.gogle.common.collect.SingletonImmutableSet");
        assertEquals(40.0, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(2867, 2867);
        Vector<Weighted<Edge<Object>>> vector0 = new Vector<Weighted<Edge<Object>>>();
        Edge<Object> edge0 = new Edge<Object>((Object) null, linkedHashSet0);
        linkedHashSet0.add(edge0);
        Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 2867);
        vector0.add(weighted0);
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Object>) linkedHashSet0, (Iterable<Weighted<Edge<Object>>>) vector0);
            fail("Expecting exception: StackOverflowError");

        } catch(StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<String>) linkedList0, (Iterable<Weighted<Edge<String>>>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.SparseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        Stack<Integer> stack0 = new Stack<Integer>();
        HashSet<Integer> hashSet0 = new HashSet<Integer>(stack0);
        hashSet0.add((Integer) null);
        ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>();
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Integer>) hashSet0, (Iterable<Weighted<Edge<Integer>>>) arrayDeque0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("com.google.common.base.Preconditions", e);
        }
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        Integer integer0 = new Integer((-1));
        SortedSet<Object> sortedSet0 = treeSet0.tailSet((Object) integer0);
        PriorityQueue<Weighted<Edge<Object>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Object>>>();
        Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
        treeSet0.add(locale_FilteringMode0);
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Object>) sortedSet0, (Iterable<Weighted<Edge<Object>>>) priorityQueue0);
            fail("Expecting exception: ClassCastException");

        } catch(ClassCastException e) {
            //
            // java.util.Locale$FilteringMode cannot be cast to java.lang.Integer
            //
            verifyException("java.lang.Integer", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        Vector<Weighted<Edge<Weighted<Object>>>> vector0 = new Vector<Weighted<Edge<Weighted<Object>>>>(0, (-1));
        Weighted<Object> weighted0 = Weighted.weighted((Object) vector0, (-1535.1));
        Edge<Weighted<Object>> edge0 = new Edge<Weighted<Object>>(weighted0, weighted0);
        Weighted<Edge<Weighted<Object>>> weighted1 = new Weighted<Edge<Weighted<Object>>>(edge0, 569.49640074);
        vector0.addElement(weighted1);
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<Object>>>>) vector0);
            fail("Expecting exception: StackOverflowError");

        } catch(StackOverflowError e) {
            //
            // no message in exception (getMessage() returned null)
            //
        }
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Weighted<Edge<Edge<Integer>>>>) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("net.mooctest.SparseWeightedGraph", e);
        }
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
        TreeSet<Weighted<Edge<String>>> treeSet0 = new TreeSet<Weighted<Edge<String>>>();
        Edge<String> edge0 = new Edge<String>("com.google.common.collect.SingletonImmutableSet", "com.google.common.collect.SingletonImmutableSet");
        Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, (-1.0));
        treeSet0.add(weighted0);
        SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) arrayDeque0, (Iterable<Weighted<Edge<String>>>) treeSet0);
        Collection<Weighted<Edge<String>>> collection0 = sparseWeightedGraph0.getIncomingEdges("com.google.common.collect.SingletonImmutableSet");
        assertTrue(collection0.contains(weighted0));
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        PriorityQueue<Weighted<Edge<Object>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Object>>>();
        SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) treeSet0, (Iterable<Weighted<Edge<Object>>>) priorityQueue0);
        Object object0 = new Object();
        Collection<Weighted<Edge<Object>>> collection0 = sparseWeightedGraph0.getIncomingEdges(object0);
        assertNotNull(collection0);
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
        TreeSet<Weighted<Edge<String>>> treeSet0 = new TreeSet<Weighted<Edge<String>>>();
        Edge<String> edge0 = new Edge<String>("com.gooleVcommon.collec.(ngletonImmutableSt", "com.gooleVcommon.collec.(ngletonImmutableSt");
        Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, (-537.29324837327));
        treeSet0.add(weighted0);
        SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) arrayDeque0, (Iterable<Weighted<Edge<String>>>) treeSet0);
        double double0 = sparseWeightedGraph0.getWeightOf("", "com.gooleVcommon.collec.(ngletonImmutableSt");
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        PriorityQueue<Weighted<Edge<Integer>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Integer>>>();
        SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) priorityQueue0);
        Integer integer0 = new Integer((-2004318069));
        double double0 = sparseWeightedGraph0.getWeightOf(integer0, integer0);
        assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(0, 1433.91F);
        Edge<Object> edge0 = new Edge<Object>((Object) null, treeSet0);
        Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 1433.91F);
        hashSet0.add(weighted0);
        // Undeclared exception!
        try {
            SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) hashSet0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // at index 0
            //
            verifyException("com.google.common.collect.ObjectArrays", e);
        }
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        TreeSet<Object> treeSet0 = new TreeSet<Object>();
        HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(0, 1433.91F);
        Edge<Object> edge0 = new Edge<Object>((Object) null, treeSet0);
        Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 1433.91F);
        hashSet0.add(weighted0);
        Edge<Object> edge1 = new Edge<Object>(treeSet0, treeSet0);
        Weighted<Edge<Object>> weighted1 = new Weighted<Edge<Object>>(edge1, 1433.91F);
        hashSet0.add(weighted1);
        SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) treeSet0, (Iterable<Weighted<Edge<Object>>>) hashSet0);
        assertNotNull(sparseWeightedGraph0);
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        HashSet<Weighted<Integer>> hashSet0 = new HashSet<Weighted<Integer>>();
        Vector<Weighted<Edge<Weighted<Integer>>>> vector0 = new Vector<Weighted<Edge<Weighted<Integer>>>>(0, 4126);
        SparseWeightedGraph<Weighted<Integer>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Integer>>) hashSet0, (Iterable<Weighted<Edge<Weighted<Integer>>>>) vector0);
        Collection<Weighted<Integer>> collection0 = sparseWeightedGraph0.getNodes();
        assertNotNull(collection0);
    }
}
