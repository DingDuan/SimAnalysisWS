/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:40:56 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class PartitionTest{

  @Test(timeout = 4000)
  public void test_E00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        partition0.sameComponent(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      linkedList0.add((Object) list0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        partition0.merge(linkedList0, object0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      linkedList0.add((Object) linkedList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        partition0.merge(linkedList0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      // Undeclared exception!
      try { 
        partition0.merge("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        partition0.componentOf(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("s@.>b@T,G-0");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "s@.>b@T,G-0");
      assertEquals("", string0);
      
      String string1 = partition0.componentOf("s@.>b@T,G-0");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test_E08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("s@.>b@T,G-0");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.componentOf("s@.>b@T,G-0");
      assertEquals("s@.>b@T,G-0", string0);
  }

  @Test(timeout = 4000)
  public void test_E09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("s@.>b@T,G-0");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("s@.>b@T,G-0", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_E10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("tart index");
      linkedList0.add("P#o(xuL|N@yx@O!");
      linkedList0.add("Nab6B6Vs");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("P#o(xuL|N@yx@O!", "Nab6B6Vs");
      assertEquals("P#o(xuL|N@yx@O!", string0);
      
      String string1 = partition0.merge("tart index", "Nab6B6Vs");
      assertEquals("P#o(xuL|N@yx@O!", string1);
  }

  @Test(timeout = 4000)
  public void test_E11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("P#o(xuL|N@yx@O!");
      linkedList0.add("pab6_rts");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "P#o(xuL|N@yx@O!");
      assertEquals("", string0);
      
      String string1 = partition0.merge("P#o(xuL|N@yx@O!", "pab6_rts");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test_E12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("P#o(xuL|N@yx@O!");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "P#o(xuL|N@yx@O!");
      assertEquals("", string0);
      
      String string1 = partition0.merge("P#o(xuL|N@yx@O!", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test_E13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test_E14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      Set<Object> set0 = partition0.getNodes();
      assertEquals(0, set0.size());
  }
}
