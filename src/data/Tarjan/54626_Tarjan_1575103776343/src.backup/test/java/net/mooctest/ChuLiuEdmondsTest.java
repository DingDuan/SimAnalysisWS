/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:24:32 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.common.base.Optional;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class ChuLiuEdmondsTest{

  @Test(timeout = 4000)
  public void test_E00()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      LinkedHashSet<Weighted<Edge<Integer>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Integer>>>();
      LinkedList<Weighted<Edge<Integer>>> linkedList0 = new LinkedList<Weighted<Edge<Integer>>>(linkedHashSet0);
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Integer>) serviceLoader0, (Iterable<Weighted<Edge<Integer>>>) linkedList0);
      LinkedHashSet<Edge<Integer>> linkedHashSet1 = new LinkedHashSet<Edge<Integer>>();
      LinkedHashSet<Edge<Integer>> linkedHashSet2 = new LinkedHashSet<Edge<Integer>>();
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) sparseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet1, (Set<Edge<Integer>>) linkedHashSet2);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test_E01()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.80884375;
      doubleArray0[1] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(1);
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test_E02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<ExclusiveEdge<Weighted<Edge<Integer>>>> priorityQueue0 = new PriorityQueue<ExclusiveEdge<Weighted<Edge<Integer>>>>(1, comparator0);
      double[][] doubleArray0 = new double[0][0];
      DenseWeightedGraph<ExclusiveEdge<Weighted<Edge<Integer>>>> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<ExclusiveEdge<Weighted<Edge<Integer>>>>) priorityQueue0, doubleArray0);
      ChuLiuEdmonds.PartialSolution<ExclusiveEdge<Weighted<Edge<Integer>>>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<ExclusiveEdge<Weighted<Edge<Integer>>>>) denseWeightedGraph0);
      ArrayList<Edge<ExclusiveEdge<Weighted<Edge<Integer>>>>> arrayList0 = new ArrayList<Edge<ExclusiveEdge<Weighted<Edge<Integer>>>>>();
      ExclusiveEdge<ExclusiveEdge<Weighted<Edge<Integer>>>> exclusiveEdge0 = ExclusiveEdge.of((Edge<ExclusiveEdge<Weighted<Edge<Integer>>>>) null, (List<Edge<ExclusiveEdge<Weighted<Edge<Integer>>>>>) arrayList0, (double) 0);
      // Undeclared exception!
      try { 
        chuLiuEdmonds_PartialSolution0.addEdge(exclusiveEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E03()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(edge0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<String>) null, (Set<Edge<String>>) linkedHashSet0, (Set<Edge<String>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E04()  throws Throwable  {
      double[][] doubleArray0 = new double[6][6];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E06()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray0[2] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E07()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>(linkedList0);
      LinkedHashSet<Weighted<Edge<Locale.Category>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Locale.Category>>>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      arrayDeque0.add(locale_Category0);
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Locale.Category>) arrayDeque0, (Iterable<Weighted<Edge<Locale.Category>>>) linkedHashSet0);
      Weighted<Arborescence<Locale.Category>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.Category>) sparseWeightedGraph0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test_E08()  throws Throwable  {
      Vector<Weighted<Object>> vector0 = new Vector<Weighted<Object>>(0, 0);
      LinkedHashSet<Weighted<Edge<Weighted<Object>>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Weighted<Object>>>>(0, 1);
      SparseWeightedGraph<Weighted<Object>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Object>>) vector0, (Iterable<Weighted<Edge<Weighted<Object>>>>) linkedHashSet0);
      ChuLiuEdmonds.PartialSolution<Weighted<Object>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Weighted<Object>>) sparseWeightedGraph0);
      Set<Weighted<Object>> set0 = chuLiuEdmonds_PartialSolution0.getNodes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test_E09()  throws Throwable  {
      ArrayList<Weighted<Edge<Locale.Category>>> arrayList0 = new ArrayList<Weighted<Edge<Locale.Category>>>();
      SparseWeightedGraph<Locale.Category> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Locale.Category>>>) arrayList0);
      ChuLiuEdmonds.PartialSolution<Locale.Category> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Locale.Category>) sparseWeightedGraph0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Optional<ExclusiveEdge<Locale.Category>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(locale_Category0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test_E10()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ArrayList<Weighted<Edge<Integer>>> arrayList0 = new ArrayList<Weighted<Edge<Integer>>>();
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Integer>) treeSet0, (Iterable<Weighted<Edge<Integer>>>) arrayList0);
      ChuLiuEdmonds.PartialSolution<Integer> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) sparseWeightedGraph0);
      Integer integer0 = new Integer(0);
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Optional<ExclusiveEdge<Integer>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(integer0, arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test_E11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(2);
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test_E12()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) denseWeightedGraph0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E13()  throws Throwable  {
      HashSet<Edge<Arborescence<Integer>>> hashSet0 = new HashSet<Edge<Arborescence<Integer>>>();
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Arborescence<Integer>>) null, (Set<Edge<Arborescence<Integer>>>) hashSet0, (Set<Edge<Arborescence<Integer>>>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E14()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Locale.Category>) null, locale_Category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ChuLiuEdmonds", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E15()  throws Throwable  {
      ChuLiuEdmonds chuLiuEdmonds0 = new ChuLiuEdmonds();
  }
}
