/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:16:56 GMT+08:00 2019
 */

package net.mooctest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.fail;

import java.util.Comparator;
import java.util.function.Consumer;

import org.junit.Test;
import org.junit.runner.RunWith;

public class FibonacciHeap_ESTest2{

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "X");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.pollOption();
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create();
      Integer integer0 = new Integer(0);
      fibonacciHeap0.add("", integer0);
      Integer integer1 = new Integer(1);
      fibonacciHeap0.add("", integer1);
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      FibonacciHeap<String, String> fibonacciHeap1 = FibonacciHeap.create();
      FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
      assertEquals(1, fibonacciHeap0.size());
  }


  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.merge((FibonacciHeap<String, Integer>) null, (FibonacciHeap<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         
      }
  }


  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.add((Integer) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      assertEquals(1, fibonacciHeap0.size());
      
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }



  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      int int0 = fibonacciHeap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FibonacciHeap<FibonacciHeap.Entry, Integer> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         
      }
  }
}
