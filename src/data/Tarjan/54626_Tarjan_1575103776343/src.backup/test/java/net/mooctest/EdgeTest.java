/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:28:50 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.LinkedHashSet;
import java.util.Set;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.common.base.Predicate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class EdgeTest{

  @Test(timeout = 4000)
  public void test_E00()  throws Throwable  {
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) "");
      String string0 = (String)edge_EdgeBuilder0.source;
      Edge<Object> edge0 = new Edge<Object>("", edge_EdgeBuilder0);
      Edge<Edge<Object>> edge1 = new Edge<Edge<Object>>(edge0, edge0);
      Edge<Object> edge2 = edge1.destination;
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      edge0.toString();
      Edge<String> edge3 = new Edge<String>("v-g#(;s<b~[", "v-g#(;s<b~[");
      String string1 = edge3.source;
      LinkedHashSet<Edge<Object>> linkedHashSet1 = new LinkedHashSet<Edge<Object>>();
      linkedHashSet1.add(edge2);
      Predicate<Edge<Object>> predicate0 = Edge.isIn((Set<Edge<Object>>) linkedHashSet1);
      Edge.from((Object) "v-g#(;s<b~[");
      edge0.equals(edge2);
      Integer integer0 = new Integer((-1));
      edge2.equals(integer0);
      Edge.from("");
      Integer integer1 = new Integer((-1954));
      edge3.equals(integer1);
      Edge.isAutoCycle();
      Predicate<Edge<Object>> predicate1 = Edge.isIn((Set<Edge<Object>>) linkedHashSet1);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test_E01()  throws Throwable  {
      Integer integer0 = new Integer(36);
      Edge.hasDestination(integer0);
      Integer integer1 = new Integer(36);
      Edge.from((Object) integer1);
      Integer integer2 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer1, integer2);
      Integer integer3 = new Integer(1);
      Edge<Integer> edge1 = new Edge<Integer>(integer1, integer3);
      edge0.equals(edge1);
      Edge<String> edge2 = new Edge<String>("", "X[:zXy$vl*");
      edge2.hashCode();
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Predicate<Edge<String>> predicate0 = Edge.isIn((Set<Edge<String>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test_E02()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge<String> edge0 = new Edge<String>("null value in entry: %s=null", "null value in entry: %s=null");
      edge0.toString();
      linkedHashSet0.add(edge0);
      linkedHashSet0.add((Edge<String>) null);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E03()  throws Throwable  {
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Predicate<Edge<Object>> predicate0 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test_E04()  throws Throwable  {
      Edge.isAutoCycle();
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Predicate<Edge<Object>> predicate0 = Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test_E05()  throws Throwable  {
      Integer integer0 = new Integer(3568);
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder0 = Edge.from(integer0);
      Edge<Integer> edge0 = edge_EdgeBuilder0.to(integer0);
      String string0 = edge0.toString();
      assertEquals("Edge{source=3568, destination=3568}", string0);
  }

  @Test(timeout = 4000)
  public void test_E06()  throws Throwable  {
      Predicate<Edge<String>> predicate0 = Edge.hasDestination("*3^=");
      Integer integer0 = new Integer((-470));
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      Edge<Object> edge1 = new Edge<Object>(edge0, predicate0);
      edge1.hashCode();
      Edge<String> edge2 = new Edge<String>("*3^=", "%v>>kD`Mq%RP^:+QS");
      boolean boolean0 = edge2.equals(edge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_E07()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Edge<Integer> edge0 = new Edge<Integer>((Integer) null, integer0);
      Edge.isAutoCycle();
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder0 = Edge.from((Integer) null);
      Edge.hasDestination((Object) edge0);
      edge0.hashCode();
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      Edge<Integer> edge1 = edge_EdgeBuilder0.to((Integer) null);
      edge1.toString();
      LinkedHashSet<Edge<Integer>> linkedHashSet1 = new LinkedHashSet<Edge<Integer>>();
      linkedHashSet1.add(edge1);
      Edge.isIn((Set<Edge<Integer>>) linkedHashSet1);
      Edge.EdgeBuilder<Object> edge_EdgeBuilder1 = Edge.from((Object) null);
      Edge.EdgeBuilder<String> edge_EdgeBuilder2 = Edge.from("null value in entry: %s=null");
      edge_EdgeBuilder2.to("");
      edge_EdgeBuilder1.to("Edge{source=null, destination=null}");
      Edge.isAutoCycle();
      Edge.hasDestination("null value in entry: %s=null");
      Edge.isAutoCycle();
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Integer>>) linkedHashSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E08()  throws Throwable  {
      LinkedHashSet<Edge<Edge<Object>>> linkedHashSet0 = new LinkedHashSet<Edge<Edge<Object>>>();
      Predicate<Edge<Edge<Object>>> predicate0 = Edge.competesWith((Set<Edge<Edge<Object>>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test_E09()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      Edge<Object> edge1 = new Edge<Object>("", integer0);
      boolean boolean0 = edge0.equals(edge1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_E10()  throws Throwable  {
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) "");
      String string0 = (String)edge_EdgeBuilder0.source;
      Edge<Object> edge0 = new Edge<Object>("", edge_EdgeBuilder0);
      Edge<Edge<Object>> edge1 = new Edge<Edge<Object>>(edge0, edge0);
      Edge<Object> edge2 = edge1.destination;
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      edge0.toString();
      Edge<String> edge3 = new Edge<String>("v-g#(;s<b~[", "v-g#(;s<b~[");
      String string1 = edge3.source;
      LinkedHashSet<Edge<Object>> linkedHashSet1 = new LinkedHashSet<Edge<Object>>();
      linkedHashSet1.add(edge2);
      Edge.isIn((Set<Edge<Object>>) linkedHashSet1);
      Edge.from((Object) "v-g#(;s<b~[");
      edge0.equals(edge2);
      Integer integer0 = new Integer((-1));
      edge2.equals(integer0);
      Edge.from("");
      edge3.equals(integer0);
      Predicate<Edge<Integer>> predicate0 = Edge.isAutoCycle();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      LinkedHashSet<Edge<Integer>> linkedHashSet2 = new LinkedHashSet<Edge<Integer>>();
      Predicate<Edge<Integer>> predicate1 = Edge.isIn((Set<Edge<Integer>>) linkedHashSet2);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test_E11()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("destination", (String) null);
      Edge<String> edge1 = new Edge<String>("destination", (String) null);
      //  // Unstable assertion: assertFalse(edge1.equals((Object)edge0));
  }

  @Test(timeout = 4000)
  public void test_E12()  throws Throwable  {
      Edge.isAutoCycle();
      Object object0 = new Object();
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from(object0);
      Edge<Object> edge0 = edge_EdgeBuilder0.to("b9K_L`:4=quj");
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      linkedHashSet0.add(edge0);
      Edge.isAutoCycle();
      Edge.isAutoCycle();
      Predicate<Edge<String>> predicate0 = Edge.hasDestination("P~! `0'Y+C%");
      Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      Edge.EdgeBuilder<Edge<Object>> edge_EdgeBuilder1 = Edge.from(edge0);
      LinkedHashSet<Edge<Edge<Object>>> linkedHashSet1 = new LinkedHashSet<Edge<Edge<Object>>>();
      java.util.function.Predicate<Object> predicate1 = java.util.function.Predicate.isEqual((Object) edge_EdgeBuilder1);
      java.util.function.Predicate<Object> predicate2 = predicate1.negate();
      linkedHashSet1.removeIf(predicate2);
      Edge.isIn((Set<Edge<Edge<Object>>>) linkedHashSet1);
      linkedHashSet0.add(edge0);
      edge0.hashCode();
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      Edge<Object> edge1 = edge_EdgeBuilder0.to("b9K_L`:4=quj");
      Edge.from((Object) "P~! `0'Y+C%");
      Edge<String> edge2 = new Edge<String>((String) null, (String) null);
      edge2.toString();
      Integer integer0 = new Integer((-203));
      Edge<Integer> edge3 = new Edge<Integer>(integer0, integer0);
      edge2.equals(edge1);
      Predicate<Edge<String>> predicate3 = Edge.hasDestination("Edge{source=null, destination=null}");
      assertFalse(predicate3.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test_E13()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge<String> edge0 = new Edge<String>("dY0", "dY0");
      linkedHashSet0.add(edge0);
      Predicate<Edge<String>> predicate0 = Edge.isIn((Set<Edge<String>>) linkedHashSet0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test_E14()  throws Throwable  {
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) null);
      Edge.isAutoCycle();
      Edge<Edge<Integer>> edge0 = new Edge<Edge<Integer>>((Edge<Integer>) null, (Edge<Integer>) null);
      Edge.EdgeBuilder<String> edge_EdgeBuilder1 = Edge.from("");
      edge0.toString();
      String string0 = edge_EdgeBuilder1.source;
      edge0.equals("");
      Edge<Object> edge1 = new Edge<Object>(edge_EdgeBuilder0, "");
      edge1.toString();
      Edge.hasDestination((Object) null);
      edge1.toString();
      edge1.equals((Object) null);
      edge_EdgeBuilder1.to("");
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E15()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>(":=(shR;-<", "");
      Integer integer0 = new Integer(563);
      Edge<Object> edge1 = new Edge<Object>(edge0, integer0);
      Edge<Object> edge2 = new Edge<Object>(edge0, edge1);
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder0 = Edge.from(integer0);
      Integer integer1 = edge_EdgeBuilder0.source;
      Edge.hasDestination((Object) integer1);
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Edge<String> edge3 = new Edge<String>(":=(shR;-<", ":=(shR;-<");
      linkedHashSet0.add(edge0);
      linkedHashSet0.add(edge3);
      Edge.isIn((Set<Edge<String>>) linkedHashSet0);
      edge2.equals(edge1);
      LinkedHashSet<Edge<Object>> linkedHashSet1 = new LinkedHashSet<Edge<Object>>();
      Predicate<Edge<Object>> predicate0 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet1);
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder1 = Edge.from(integer0);
      Edge<Object> edge4 = new Edge<Object>(linkedHashSet1, "");
      String string0 = (String)edge4.destination;
      edge1.equals("");
      Edge<Edge<Object>> edge5 = new Edge<Edge<Object>>(edge2, edge2);
      edge1.hashCode();
      LinkedHashSet<Edge<Edge<String>>> linkedHashSet2 = new LinkedHashSet<Edge<Edge<String>>>();
      Edge<Edge<String>> edge6 = new Edge<Edge<String>>(edge0, edge0);
      linkedHashSet2.add(edge6);
      Edge.isIn((Set<Edge<Edge<String>>>) linkedHashSet2);
      edge3.equals(predicate0);
      Integer integer2 = new Integer(2);
      edge_EdgeBuilder1.to(integer2);
      Edge.isIn((Set<Edge<Object>>) linkedHashSet1);
      Edge.from(edge2);
      Edge.EdgeBuilder<String> edge_EdgeBuilder2 = Edge.from("destination");
      assertNotNull(edge_EdgeBuilder2);
  }
}
