/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:30:16 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.common.base.Optional;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class EdgeQueueMapTest{

  @Test(timeout = 4000)
  public void test_E0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<String, Integer> pair0 = new Pair<String, Integer>("", integer0);
      Stack<Pair<String, Integer>> stack0 = new Stack<Pair<String, Integer>>();
      Partition<Pair<String, Integer>> partition0 = Partition.singletons((Collection<Pair<String, Integer>>) stack0);
      EdgeQueueMap.EdgeQueue<Pair<String, Integer>> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create(pair0, partition0);
      Edge<Pair<String, Integer>> edge0 = (Edge<Pair<String, Integer>>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<Pair<String, Integer>> exclusiveEdge0 = ExclusiveEdge.of(edge0, (double) 0);
      // Undeclared exception!
      try { 
        edgeQueueMap_EdgeQueue0.addEdge(exclusiveEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E1()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) vector0);
      EdgeQueueMap<String> edgeQueueMap0 = new EdgeQueueMap<String>(partition0);
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      Weighted<Edge<String>> weighted0 = Weighted.weighted(edge0, (double) 0);
      // Undeclared exception!
      try { 
        edgeQueueMap0.addEdge(weighted0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Partition", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>(integer0, (Object) null);
      HashSet<Pair<Integer, Object>> hashSet0 = new HashSet<Pair<Integer, Object>>();
      Partition<Pair<Integer, Object>> partition0 = Partition.singletons((Collection<Pair<Integer, Object>>) hashSet0);
      EdgeQueueMap.EdgeQueue<Pair<Integer, Object>> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create(pair0, partition0);
      Arborescence<Pair<Integer, Object>> arborescence0 = Arborescence.of((ImmutableMap<Pair<Integer, Object>, Pair<Integer, Object>>) null);
      Optional<ExclusiveEdge<Pair<Integer, Object>>> optional0 = edgeQueueMap_EdgeQueue0.popBestEdge(arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test_E3()  throws Throwable  {
      EdgeQueueMap<Locale.Category> edgeQueueMap0 = new EdgeQueueMap<Locale.Category>((Partition<Locale.Category>) null);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      HashSet<Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>>> hashSet0 = new HashSet<Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>>>(0, 1);
      Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>> pair0 = (Pair<EdgeQueueMap.EdgeQueue<Locale.Category>, Weighted<Edge<Locale.Category>>>) mock(Pair.class, new ViolatedAssumptionAnswer());
      hashSet0.add(pair0);
      // Undeclared exception!
      try { 
        edgeQueueMap0.merge(locale_Category0, hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.EdgeQueueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E4()  throws Throwable  {
      LinkedList<ExclusiveEdge<String>> linkedList0 = new LinkedList<ExclusiveEdge<String>>();
      Partition<ExclusiveEdge<String>> partition0 = Partition.singletons((Collection<ExclusiveEdge<String>>) linkedList0);
      EdgeQueueMap<ExclusiveEdge<String>> edgeQueueMap0 = new EdgeQueueMap<ExclusiveEdge<String>>(partition0);
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<String> exclusiveEdge0 = ExclusiveEdge.of(edge0, 0.0);
      ImmutableSortedMap<ExclusiveEdge<String>, ExclusiveEdge<String>> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<ExclusiveEdge<String>> arborescence0 = Arborescence.of((ImmutableMap<ExclusiveEdge<String>, ExclusiveEdge<String>>) immutableSortedMap0);
      Optional<ExclusiveEdge<ExclusiveEdge<String>>> optional0 = edgeQueueMap0.popBestEdge(exclusiveEdge0, arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test_E5()  throws Throwable  {
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Partition<Edge<Object>> partition0 = Partition.singletons((Collection<Edge<Object>>) linkedHashSet0);
      EdgeQueueMap.EdgeQueue<Edge<Object>> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create((Edge<Object>) null, partition0);
      Optional<ExclusiveEdge<Edge<Object>>> optional0 = edgeQueueMap_EdgeQueue0.popBestEdge();
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test_E6()  throws Throwable  {
      ArrayDeque<Pair<Integer, String>> arrayDeque0 = new ArrayDeque<Pair<Integer, String>>();
      Partition<Pair<Integer, String>> partition0 = Partition.singletons((Collection<Pair<Integer, String>>) arrayDeque0);
      EdgeQueueMap<Pair<Integer, String>> edgeQueueMap0 = new EdgeQueueMap<Pair<Integer, String>>(partition0);
      Integer integer0 = new Integer(0);
      Pair<Integer, String> pair0 = new Pair<Integer, String>(integer0, "");
      PriorityQueue<Pair<EdgeQueueMap.EdgeQueue<Pair<Integer, String>>, Weighted<Edge<Pair<Integer, String>>>>> priorityQueue0 = new PriorityQueue<Pair<EdgeQueueMap.EdgeQueue<Pair<Integer, String>>, Weighted<Edge<Pair<Integer, String>>>>>();
      EdgeQueueMap.EdgeQueue edgeQueueMap_EdgeQueue0 = edgeQueueMap0.merge(pair0, priorityQueue0);
      assertNotNull(edgeQueueMap_EdgeQueue0);
  }
}
