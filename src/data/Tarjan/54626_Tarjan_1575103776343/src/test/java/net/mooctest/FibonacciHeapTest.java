/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:16:56 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.evosuite.shaded.org.mockito.ArgumentMatchers.anyString;
import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.fail;

import java.util.Comparator;
import java.util.function.Consumer;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class FibonacciHeapTest{

  @Test(timeout = 4000)
  public void test_E00()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3896), 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "Cannot increase priority");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("K*4rr", "K*4rr");
      fibonacciHeap0.pollOption();
      assertEquals(3, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E01()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "X");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.pollOption();
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E02()  throws Throwable  {
      FibonacciHeap<String, Integer> fibonacciHeap0 = FibonacciHeap.create();
      Integer integer0 = new Integer(0);
      fibonacciHeap0.add("", integer0);
      Integer integer1 = new Integer(1);
      fibonacciHeap0.add("", integer1);
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E03()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E04()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      FibonacciHeap<String, String> fibonacciHeap1 = FibonacciHeap.create();
      FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E05()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(comparator0).toString();
      FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
      FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap0);
      assertNotSame(fibonacciHeap2, fibonacciHeap0);
      assertEquals(0, fibonacciHeap2.size());
  }

  @Test(timeout = 4000)
  public void test_E06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      fibonacciHeap0.add("", object0);
      int int0 = fibonacciHeap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test_E07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.merge((FibonacciHeap<String, Integer>) null, (FibonacciHeap<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Comparator<? super Object> comparator1 = fibonacciHeap0.comparator();
      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.create();
      FibonacciHeap<Object, Integer> fibonacciHeap2 = FibonacciHeap.create((Comparator<? super Integer>) comparator1);
      // Undeclared exception!
      try { 
        FibonacciHeap.merge(fibonacciHeap1, fibonacciHeap2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Heaps that use different comparators can't be merged.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<FibonacciHeap.Entry, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E10()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E11()  throws Throwable  {
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.add((Integer) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E12()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 1).when(comparator0).compare(anyString() , anyString());
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.add("", "");
      fibonacciHeap0.pollOption();
      assertEquals(3, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E13()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3910), 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      fibonacciHeap0.clear();
      fibonacciHeap0.add("R", "R");
      fibonacciHeap0.add("R", "R");
      fibonacciHeap0.add("K*4rr", "K*4rr");
      fibonacciHeap0.pollOption();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<FibonacciHeap.Entry, String> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super String>) comparator1);
      fibonacciHeap1.isEmpty();
      fibonacciHeap0.pollOption();
      assertEquals(1, fibonacciHeap0.size());
      
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator2).toString();
      FibonacciHeap<Object, Object> fibonacciHeap2 = FibonacciHeap.create((Comparator<? super Object>) comparator2);
      FibonacciHeap.merge(fibonacciHeap2, fibonacciHeap2);
      assertEquals(0, fibonacciHeap2.size());
  }

  @Test(timeout = 4000)
  public void test_E14()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      assertEquals(1, fibonacciHeap0.size());
      
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E15()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      fibonacciHeap0.add("", object0);
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertEquals(1, fibonacciHeap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test_E17()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.add("", "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fibonacciHeap0.forEach(consumer0);
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E18()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      fibonacciHeap0.add("", "");
      fibonacciHeap0.iterator();
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E19()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      int int0 = fibonacciHeap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_E20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      fibonacciHeap0.peekOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test_E21()  throws Throwable  {
      FibonacciHeap<FibonacciHeap.Entry, Integer> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
      fibonacciHeap0.iterator();
      assertEquals(0, fibonacciHeap0.size());
  }
}
