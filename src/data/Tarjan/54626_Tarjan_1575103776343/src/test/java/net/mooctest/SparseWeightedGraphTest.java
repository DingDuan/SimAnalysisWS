/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:42:21 GMT+08:00 2019
 */

package net.mooctest;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Stack;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(useVNET = true, separateClassLoader = true, useJEE = true) 
public class SparseWeightedGraphTest{

  @Test(timeout = 4000)
  public void test_E00()  throws Throwable  {
      ArrayDeque<Weighted<Edge<Weighted<Integer>>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Weighted<Integer>>>>();
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = Weighted.weighted(integer0, (double) 1);
      Edge<Weighted<Integer>> edge0 = new Edge<Weighted<Integer>>(weighted0, weighted0);
      Weighted<Edge<Weighted<Integer>>> weighted1 = new Weighted<Edge<Weighted<Integer>>>(edge0, 0);
      arrayDeque0.add(weighted1);
      SparseWeightedGraph<Weighted<Integer>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<Integer>>>>) arrayDeque0);
      Weighted<Integer> weighted2 = new Weighted<Integer>(integer0, 1);
      double double0 = sparseWeightedGraph0.getWeightOf(weighted0, weighted2);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_E01()  throws Throwable  {
      ArrayDeque<Weighted<Edge<Weighted<Integer>>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Weighted<Integer>>>>();
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = Weighted.weighted(integer0, (double) 0);
      Edge<Weighted<Integer>> edge0 = new Edge<Weighted<Integer>>(weighted0, weighted0);
      Weighted<Edge<Weighted<Integer>>> weighted1 = new Weighted<Edge<Weighted<Integer>>>(edge0, 1);
      arrayDeque0.add(weighted1);
      SparseWeightedGraph<Weighted<Integer>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<Integer>>>>) arrayDeque0);
      double double0 = sparseWeightedGraph0.getWeightOf(weighted0, weighted0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_E02()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(0);
      Edge<Object> edge0 = new Edge<Object>(hashSet0, hashSet0);
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 0.0);
      hashSet0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Object>) arrayDeque0, (Iterable<Weighted<Edge<Object>>>) hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E03()  throws Throwable  {
      ArrayDeque<Edge<Locale.FilteringMode>> arrayDeque0 = new ArrayDeque<Edge<Locale.FilteringMode>>();
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Edge<Locale.FilteringMode>>) arrayDeque0, (Iterable<Weighted<Edge<Edge<Locale.FilteringMode>>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.SparseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E04()  throws Throwable  {
      ArrayList<Edge<Locale.FilteringMode>> arrayList0 = new ArrayList<Edge<Locale.FilteringMode>>();
      arrayList0.add((Edge<Locale.FilteringMode>) null);
      ArrayDeque<Weighted<Edge<Edge<Locale.FilteringMode>>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Edge<Locale.FilteringMode>>>>(0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Edge<Locale.FilteringMode>>) arrayList0, (Iterable<Weighted<Edge<Edge<Locale.FilteringMode>>>>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E05()  throws Throwable  {
      LinkedList<Weighted<Edge<Object>>> linkedList0 = new LinkedList<Weighted<Edge<Object>>>();
      Integer integer0 = new Integer(0);
      Edge<Object> edge0 = new Edge<Object>(integer0, linkedList0);
      Weighted<Edge<Object>> weighted0 = Weighted.weighted(edge0, (double) 0);
      linkedList0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test_E06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<String>>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.SparseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E07()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ArrayDeque<Weighted<Edge<Object>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Object>>>(0);
      Edge<Object> edge0 = new Edge<Object>(stack0, stack0);
      Weighted<Edge<Object>> weighted0 = Weighted.weighted(edge0, (double) 0);
      arrayDeque0.add(weighted0);
      arrayDeque0.add(weighted0);
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) stack0, (Iterable<Weighted<Edge<Object>>>) arrayDeque0);
      assertNotNull(sparseWeightedGraph0);
  }

  @Test(timeout = 4000)
  public void test_E08()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<Weighted<Edge<String>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<String>>>();
      Edge<String> edge0 = new Edge<String>("", ")I}3)!");
      Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, 0.0);
      linkedHashSet0.add(weighted0);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) hashSet0, (Iterable<Weighted<Edge<String>>>) linkedHashSet0);
      Collection<Weighted<Edge<String>>> collection0 = sparseWeightedGraph0.getIncomingEdges(")I}3)!");
      assertTrue(collection0.contains(weighted0));
  }

  @Test(timeout = 4000)
  public void test_E09()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("", "");
      ArrayList<Weighted<Edge<Object>>> arrayList0 = new ArrayList<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) arrayList0);
      Collection<Weighted<Edge<Object>>> collection0 = sparseWeightedGraph0.getIncomingEdges(edge0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test_E10()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ArrayDeque<Weighted<Edge<Object>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Object>>>(0);
      Edge<Object> edge0 = new Edge<Object>(stack0, stack0);
      Weighted<Edge<Object>> weighted0 = Weighted.weighted(edge0, (double) 0);
      arrayDeque0.add(weighted0);
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) stack0, (Iterable<Weighted<Edge<Object>>>) arrayDeque0);
      Object object0 = new Object();
      double double0 = sparseWeightedGraph0.getWeightOf(object0, stack0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_E11()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<Weighted<Edge<String>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) hashSet0, (Iterable<Weighted<Edge<String>>>) linkedHashSet0);
      double double0 = sparseWeightedGraph0.getWeightOf("", "");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test_E12()  throws Throwable  {
      ArrayDeque<Weighted<Edge<String>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<String>>>();
      Edge<String> edge0 = new Edge<String>((String) null, "");
      Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, 0.0);
      arrayDeque0.add(weighted0);
      arrayDeque0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // at index 0
         //
         verifyException("com.google.common.collect.ObjectArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test_E13()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      LinkedHashSet<Weighted<Edge<String>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) hashSet0, (Iterable<Weighted<Edge<String>>>) linkedHashSet0);
      Collection<String> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }
}
