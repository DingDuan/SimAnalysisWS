/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:53:56 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javaparser.TokenRange;
import com.github.javaparser.ast.ArrayCreationLevel;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.body.AnnotationDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.ConstructorDeclaration;
import com.github.javaparser.ast.body.FieldDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.VariableDeclarator;
import com.github.javaparser.ast.expr.AnnotationExpr;
import com.github.javaparser.ast.expr.Expression;
import com.github.javaparser.ast.expr.NormalAnnotationExpr;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.expr.VariableDeclarationExpr;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.ast.type.TypeParameter;
import com.google.common.base.Predicate;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import net.mooctest.Edge;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SparseWeightedGraph_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Weighted<Edge<Weighted<Object>>>> treeSet0 = new TreeSet<Weighted<Edge<Weighted<Object>>>>();
      TreeSet<Weighted<Edge<Weighted<Object>>>> treeSet1 = new TreeSet<Weighted<Edge<Weighted<Object>>>>((SortedSet<Weighted<Edge<Weighted<Object>>>>) treeSet0);
      Weighted<Object> weighted0 = Weighted.weighted((Object) treeSet1, 0.0);
      Edge<Weighted<Object>> edge0 = new Edge<Weighted<Object>>(weighted0, weighted0);
      Weighted<Edge<Weighted<Object>>> weighted1 = new Weighted<Edge<Weighted<Object>>>(edge0, 0.0);
      treeSet1.add(weighted1);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Weighted<Object>>>>) treeSet1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel((Expression) null);
      Class<ConstructorDeclaration> class0 = ConstructorDeclaration.class;
      List<ConstructorDeclaration> list0 = arrayCreationLevel0.getChildNodesByType(class0);
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(list0);
      arrayCreationLevel0.findRootNode();
      ArrayDeque<Weighted<Edge<Object>>> arrayDeque1 = new ArrayDeque<Weighted<Edge<Object>>>();
      arrayCreationLevel0.equals((Object) null);
      ArrayDeque<Weighted<Edge<Object>>> arrayDeque2 = arrayDeque1.clone();
      NormalAnnotationExpr normalAnnotationExpr0 = new NormalAnnotationExpr();
      Object object0 = new Object();
      Edge<Object> edge0 = new Edge<Object>(normalAnnotationExpr0, object0);
      PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.INT;
      edge0.toString();
      Edge.hasDestination(primitiveType_Primitive0);
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, (-2));
      arrayDeque2.add(weighted0);
      Edge.from("Edge{source=@empty(), destination=java.lang.Object@2d514e20}");
      Weighted<Edge<Object>> weighted1 = new Weighted<Edge<Object>>(edge0, 1633.33697336);
      weighted1.toString();
      arrayDeque1.add(weighted1);
      arrayDeque2.add(weighted1);
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) arrayDeque0, (Iterable<Weighted<Edge<Object>>>) arrayDeque2);
      arrayDeque2.add(weighted1);
      arrayDeque2.removeLastOccurrence(edge0);
      Collection<Object> collection0 = sparseWeightedGraph0.getNodes();
      SparseWeightedGraph.from((Iterable<Object>) collection0, (Iterable<Weighted<Edge<Object>>>) arrayDeque2);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) arrayDeque2);
      HashSet<String> hashSet0 = new HashSet<String>();
      PriorityQueue<Weighted<Edge<String>>> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Weighted<Edge<String>>>((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<ConstructorDeclaration, Integer> hashMap0 = new HashMap<ConstructorDeclaration, Integer>();
      HashMap<ConstructorDeclaration, Integer> hashMap1 = new HashMap<ConstructorDeclaration, Integer>(hashMap0);
      Collection<Integer> collection0 = hashMap1.values();
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>();
      hashMap1.put((ConstructorDeclaration) null, (Integer) null);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque1 = arrayDeque0.clone();
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Integer>) collection0, (Iterable<Weighted<Edge<Integer>>>) arrayDeque1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      PriorityQueue<Weighted<Edge<PrimitiveType.Primitive>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<PrimitiveType.Primitive>>>(comparator0);
      PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.DOUBLE;
      PrimitiveType.Primitive primitiveType_Primitive1 = PrimitiveType.Primitive.LONG;
      Edge<PrimitiveType.Primitive> edge0 = new Edge<PrimitiveType.Primitive>(primitiveType_Primitive0, primitiveType_Primitive1);
      Weighted<Edge<PrimitiveType.Primitive>> weighted0 = Weighted.weighted(edge0, 1203.78279466874);
      priorityQueue0.offer(weighted0);
      Weighted<Edge<PrimitiveType.Primitive>> weighted1 = new Weighted<Edge<PrimitiveType.Primitive>>(edge0, 1203.78279466874);
      weighted1.equals(edge0);
      priorityQueue0.add(weighted1);
      priorityQueue0.add(weighted1);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<PrimitiveType.Primitive>>>) priorityQueue0);
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel(0);
      Class<TypeParameter> class0 = TypeParameter.class;
      List<TypeParameter> list0 = arrayCreationLevel0.getChildNodesByType(class0);
      NodeList<TypeParameter> nodeList0 = new NodeList<TypeParameter>(list0);
      nodeList0.iterator();
      Vector<Weighted<Edge<TypeParameter>>> vector0 = new Vector<Weighted<Edge<TypeParameter>>>();
      SparseWeightedGraph<TypeParameter> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<TypeParameter>) nodeList0, (Iterable<Weighted<Edge<TypeParameter>>>) vector0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((Collection<? extends Integer>) treeSet0);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>(0);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque1 = arrayDeque0.clone();
      SparseWeightedGraph.from((Iterable<Integer>) treeSet1, (Iterable<Weighted<Edge<Integer>>>) arrayDeque1);
      sparseWeightedGraph0.getNodes();
      TreeSet<Weighted<Edge<Object>>> treeSet2 = new TreeSet<Weighted<Edge<Object>>>();
      SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) treeSet2);
      Class<String> class1 = String.class;
      ServiceLoader.load(class1, (ClassLoader) null);
      Vector<Weighted<Edge<String>>> vector1 = null;
      try {
        vector1 = new Vector<Weighted<Edge<String>>>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Weighted<Edge<ConstructorDeclaration>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<ConstructorDeclaration>>>(comparator0);
      Edge<ConstructorDeclaration> edge0 = new Edge<ConstructorDeclaration>((ConstructorDeclaration) null, (ConstructorDeclaration) null);
      Weighted<Edge<ConstructorDeclaration>> weighted0 = new Weighted<Edge<ConstructorDeclaration>>(edge0, (-1.0));
      priorityQueue0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<ConstructorDeclaration>>>) priorityQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<Weighted<Edge<TypeParameter>>> vector0 = new Vector<Weighted<Edge<TypeParameter>>>(0, 0);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<TypeParameter>>>) vector0);
      ArrayDeque<Weighted<Edge<String>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<String>>>();
      ArrayDeque<Weighted<Edge<String>>> arrayDeque1 = arrayDeque0.clone();
      SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) arrayDeque1);
      ArrayList<Weighted<Edge<ConstructorDeclaration>>> arrayList0 = new ArrayList<Weighted<Edge<ConstructorDeclaration>>>(0);
      ConstructorDeclaration constructorDeclaration0 = new ConstructorDeclaration();
      Edge<ConstructorDeclaration> edge0 = new Edge<ConstructorDeclaration>(constructorDeclaration0, constructorDeclaration0);
      Weighted<Edge<ConstructorDeclaration>> weighted0 = Weighted.weighted(edge0, 1499.1764850339227);
      arrayList0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<ConstructorDeclaration>) null, (Iterable<Weighted<Edge<ConstructorDeclaration>>>) arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.ImmutableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayDeque<Weighted<Edge<String>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<String>>>(49);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) arrayDeque0);
      Collection<String> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Weighted<Edge<PrimitiveType.Primitive>>> arrayList0 = new ArrayList<Weighted<Edge<PrimitiveType.Primitive>>>(1421);
      SparseWeightedGraph<PrimitiveType.Primitive> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<PrimitiveType.Primitive>>>) arrayList0);
      assertNotNull(sparseWeightedGraph0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      int int0 = 1051;
      HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(1051, 1051);
      Edge<Object> edge0 = new Edge<Object>(hashSet0, hashSet0);
      PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.BOOLEAN;
      primitiveType_Primitive0.toBoxedType();
      Edge<Object> edge1 = new Edge<Object>(primitiveType_Primitive0, hashSet0);
      linkedHashSet0.add(edge1);
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 0.0);
      hashSet0.spliterator();
      hashSet0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Object>) linkedHashSet0, (Iterable<Weighted<Edge<Object>>>) hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterable<Weighted<Edge<String>>> iterable0 = null;
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.SparseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<Weighted<Edge<String>>> treeSet0 = new TreeSet<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) treeSet0);
      Collection<String> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Weighted<Edge<Annotation>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Annotation>>>(comparator0);
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      Edge<Annotation> edge0 = new Edge<Annotation>(annotation0, annotation0);
      Weighted<Edge<Annotation>> weighted0 = Weighted.weighted(edge0, (-23.76295339007522));
      priorityQueue0.add(weighted0);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<Annotation>>>) priorityQueue0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(417, 417);
      PriorityQueue<Weighted<Edge<String>>> priorityQueue1 = new PriorityQueue<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) linkedHashSet0, (Iterable<Weighted<Edge<String>>>) priorityQueue1);
      sparseWeightedGraph0.getWeightOf("%s is not an TypeParameter", ")V]RdKcHdmS$!W");
      LinkedList<Edge<Object>> linkedList0 = new LinkedList<Edge<Object>>();
      HashSet<Edge<Object>> hashSet0 = new HashSet<Edge<Object>>(linkedList0);
      HashSet<Weighted<Edge<Edge<Object>>>> hashSet1 = new HashSet<Weighted<Edge<Edge<Object>>>>(417);
      SparseWeightedGraph<Edge<Object>> sparseWeightedGraph1 = SparseWeightedGraph.from((Iterable<Edge<Object>>) hashSet0, (Iterable<Weighted<Edge<Edge<Object>>>>) hashSet1);
      sparseWeightedGraph1.getIncomingEdges((Edge<Object>) null);
      HashSet<Weighted<Edge<PrimitiveType.Primitive>>> hashSet2 = null;
      try {
        hashSet2 = new HashSet<Weighted<Edge<PrimitiveType.Primitive>>>((-2065));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2065
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel();
      ArrayCreationLevel arrayCreationLevel1 = arrayCreationLevel0.removeDimension();
      Class<Annotation> class0 = Annotation.class;
      NormalAnnotationExpr normalAnnotationExpr0 = arrayCreationLevel1.addAndGetAnnotation(class0);
      Weighted.weighted((AnnotationExpr) normalAnnotationExpr0, (double) (-1));
      LinkedHashSet<Weighted<Edge<Object>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Object>>>();
      linkedHashSet0.add((Weighted<Edge<Object>>) null);
      ArrayList<Weighted<Edge<String>>> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Weighted<Edge<String>>>((-2716));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2716
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashSet<Weighted<Edge<Edge<Object>>>> hashSet0 = new HashSet<Weighted<Edge<Edge<Object>>>>();
      SparseWeightedGraph.from((Iterable<Weighted<Edge<Edge<Object>>>>) hashSet0);
      ArrayList<Weighted<Edge<TypeParameter>>> arrayList0 = new ArrayList<Weighted<Edge<TypeParameter>>>();
      TypeParameter typeParameter0 = null;
      try {
        typeParameter0 = new TypeParameter("");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // A string was unexpectedly empty.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      ArrayList<Weighted<Edge<Annotation>>> arrayList0 = new ArrayList<Weighted<Edge<Annotation>>>();
      SparseWeightedGraph<Annotation> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Annotation>) linkedList0, (Iterable<Weighted<Edge<Annotation>>>) arrayList0);
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      Collection<Weighted<Edge<Annotation>>> collection0 = sparseWeightedGraph0.getIncomingEdges(annotation0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<Weighted<Edge<TypeParameter>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<TypeParameter>>>();
      ArrayDeque<Weighted<Edge<TypeParameter>>> arrayDeque1 = arrayDeque0.clone();
      TypeParameter typeParameter0 = new TypeParameter("2k1");
      NodeList<ClassOrInterfaceType> nodeList0 = typeParameter0.getTypeBound();
      TypeParameter typeParameter1 = new TypeParameter("2k1", nodeList0);
      Edge<TypeParameter> edge0 = new Edge<TypeParameter>(typeParameter1, typeParameter1);
      Weighted<Edge<TypeParameter>> weighted0 = Weighted.weighted(edge0, 0.0);
      arrayDeque1.add(weighted0);
      SparseWeightedGraph<TypeParameter> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<TypeParameter>>>) arrayDeque1);
      sparseWeightedGraph0.getIncomingEdges(typeParameter0);
      ArrayList<ConstructorDeclaration> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<ConstructorDeclaration>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      HashSet<Weighted<Edge<String>>> hashSet0 = new HashSet<Weighted<Edge<String>>>(1, 1);
      Collection<PrimitiveType.Primitive> collection0 = null;
      // Undeclared exception!
      try { 
        hashSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Vector<Weighted<Edge<String>>> vector0 = new Vector<Weighted<Edge<String>>>(0);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) arrayDeque0, (Iterable<Weighted<Edge<String>>>) vector0);
      vector0.add((Weighted<Edge<String>>) null);
      sparseWeightedGraph0.getIncomingEdges("h,8qY");
      ArrayDeque<Edge<Object>> arrayDeque1 = new ArrayDeque<Edge<Object>>();
      ArrayDeque<Edge<Object>> arrayDeque2 = arrayDeque1.clone();
      ArrayList<Edge<Object>> arrayList0 = new ArrayList<Edge<Object>>(arrayDeque2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Weighted<Edge<Edge<Object>>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Edge<Object>>>>(comparator0);
      SparseWeightedGraph<Edge<Object>> sparseWeightedGraph1 = SparseWeightedGraph.from((Iterable<Edge<Object>>) arrayList0, (Iterable<Weighted<Edge<Edge<Object>>>>) priorityQueue0);
      assertNotNull(sparseWeightedGraph1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(250, 250).when(comparator0).compare(any() , any());
      PriorityQueue<Weighted<Edge<PrimitiveType.Primitive>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<PrimitiveType.Primitive>>>(comparator0);
      PrimitiveType.Primitive primitiveType_Primitive0 = PrimitiveType.Primitive.DOUBLE;
      PrimitiveType.Primitive primitiveType_Primitive1 = PrimitiveType.Primitive.LONG;
      Edge<PrimitiveType.Primitive> edge0 = new Edge<PrimitiveType.Primitive>(primitiveType_Primitive0, primitiveType_Primitive1);
      Weighted<Edge<PrimitiveType.Primitive>> weighted0 = Weighted.weighted(edge0, 1203.78279466874);
      priorityQueue0.offer(weighted0);
      Weighted<Edge<PrimitiveType.Primitive>> weighted1 = new Weighted<Edge<PrimitiveType.Primitive>>(edge0, 1203.78279466874);
      weighted1.equals(edge0);
      priorityQueue0.add(weighted1);
      priorityQueue0.add(weighted1);
      SparseWeightedGraph.from((Iterable<Weighted<Edge<PrimitiveType.Primitive>>>) priorityQueue0);
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel(0);
      Class<TypeParameter> class0 = TypeParameter.class;
      List<TypeParameter> list0 = arrayCreationLevel0.getChildNodesByType(class0);
      NodeList<TypeParameter> nodeList0 = new NodeList<TypeParameter>(list0);
      nodeList0.iterator();
      Vector<Weighted<Edge<TypeParameter>>> vector0 = new Vector<Weighted<Edge<TypeParameter>>>();
      SparseWeightedGraph<TypeParameter> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<TypeParameter>) nodeList0, (Iterable<Weighted<Edge<TypeParameter>>>) vector0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>((Collection<? extends Integer>) treeSet0);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>(0);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque1 = arrayDeque0.clone();
      SparseWeightedGraph.from((Iterable<Integer>) treeSet1, (Iterable<Weighted<Edge<Integer>>>) arrayDeque1);
      sparseWeightedGraph0.getNodes();
      TreeSet<Weighted<Edge<Object>>> treeSet2 = new TreeSet<Weighted<Edge<Object>>>();
      SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) treeSet2);
      Class<String> class1 = String.class;
      ServiceLoader.load(class1, (ClassLoader) null);
      Vector<Weighted<Edge<String>>> vector1 = null;
      try {
        vector1 = new Vector<Weighted<Edge<String>>>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      HashSet<Weighted<Edge<String>>> hashSet0 = new HashSet<Weighted<Edge<String>>>(0);
      String string0 = "!'1g:&3FoTYw";
      Edge<String> edge0 = new Edge<String>("!'1g:&3FoTYw", "net.mooctest.SparseWeightedGraph");
      HashSet<Edge<TypeParameter>> hashSet1 = new HashSet<Edge<TypeParameter>>();
      Edge.isIn((Set<Edge<TypeParameter>>) hashSet1);
      Weighted<Edge<String>> weighted0 = new Weighted<Edge<String>>(edge0, 0.0);
      weighted0.equals(hashSet0);
      hashSet0.add(weighted0);
      hashSet0.spliterator();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) serviceLoader0, (Iterable<Weighted<Edge<String>>>) hashSet0);
      sparseWeightedGraph0.getNodes();
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<ConstructorDeclaration>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.SparseWeightedGraph", e);
      }
  }
}
