/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:59:19 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Predicate;
import java.lang.annotation.Annotation;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import net.mooctest.DenseWeightedGraph;
import net.mooctest.Edge;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import net.mooctest.WeightedGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeightedGraph_ESTest{

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ArrayList<Weighted<Edge<Object>>> arrayList0 = new ArrayList<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) vector0, (Iterable<Weighted<Edge<Object>>>) arrayList0);
      Edge<String> edge0 = new Edge<String>("", "");
      double double0 = sparseWeightedGraph0.getWeightOf(edge0, edge0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(arrayDeque0);
      TreeSet<Weighted<Edge<Object>>> treeSet0 = new TreeSet<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) arrayList0, (Iterable<Weighted<Edge<Object>>>) treeSet0);
      Collection<Object> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(arrayDeque0);
      TreeSet<Weighted<Edge<Object>>> treeSet0 = new TreeSet<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) arrayList0, (Iterable<Weighted<Edge<Object>>>) treeSet0);
      Collection<Weighted<Edge<Object>>> collection0 = sparseWeightedGraph0.getIncomingEdges(arrayDeque0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[1] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.filterEdges((Predicate<Edge<Integer>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ArrayDeque<Annotation> arrayDeque0 = new ArrayDeque<Annotation>();
      PriorityQueue<Weighted<Edge<Annotation>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<Annotation>>>();
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      arrayDeque0.offerLast(annotation0);
      SparseWeightedGraph<Annotation> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Annotation>) arrayDeque0, (Iterable<Weighted<Edge<Annotation>>>) priorityQueue0);
      WeightedGraph<Annotation> weightedGraph0 = sparseWeightedGraph0.filterEdges((Predicate<Edge<Annotation>>) null);
      assertNotNull(weightedGraph0);
  }
}
