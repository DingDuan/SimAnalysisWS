/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:00:16 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Iterator;
import net.mooctest.FibonacciQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FibonacciQueue_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      int int0 = fibonacciQueue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
      Integer integer0 = new Integer(0);
      fibonacciQueue0.offer(integer0);
      int int0 = fibonacciQueue0.size();
      assertFalse(fibonacciQueue0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      fibonacciQueue0.add("");
      String string0 = fibonacciQueue0.poll();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      // Undeclared exception!
      try { 
        fibonacciQueue0.offer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciQueue.create((Comparator<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super String>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<Object> fibonacciQueue1 = FibonacciQueue.create((Comparator<? super Object>) comparator1);
      fibonacciQueue1.add(fibonacciQueue0);
      FibonacciQueue fibonacciQueue2 = (FibonacciQueue)fibonacciQueue1.peek();
      assertEquals(0, fibonacciQueue2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      String string0 = fibonacciQueue0.peek();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super String>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<Object> fibonacciQueue1 = FibonacciQueue.create((Comparator<? super Object>) comparator1);
      fibonacciQueue1.add(fibonacciQueue0);
      Object[] objectArray0 = fibonacciQueue1.toArray();
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Integer>) comparator0);
      Iterator<Integer> iterator0 = fibonacciQueue0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      Comparator<? super String> comparator0 = fibonacciQueue0.comparator();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciQueue<Object> fibonacciQueue0 = FibonacciQueue.create((Comparator<? super Object>) comparator0);
      Object object0 = fibonacciQueue0.poll();
      assertNull(object0);
  }
}
