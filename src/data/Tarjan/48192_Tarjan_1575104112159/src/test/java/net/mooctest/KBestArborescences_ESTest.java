/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 05:52:00 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.IfStmt;
import com.google.common.base.Optional;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import net.mooctest.Arborescence;
import net.mooctest.DenseWeightedGraph;
import net.mooctest.Edge;
import net.mooctest.EdgeQueueMap;
import net.mooctest.ExclusiveEdge;
import net.mooctest.KBestArborescences;
import net.mooctest.Partition;
import net.mooctest.SparseWeightedGraph;
import net.mooctest.Weighted;
import net.mooctest.WeightedGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KBestArborescences_ESTest{

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Edge<String> edge0 = (Edge<String>) mock(Edge.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      TreeSet<Edge<String>> treeSet0 = new TreeSet<Edge<String>>();
      KBestArborescences.SubsetOfSolutions<String> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<String>(edge0, (Weighted<Arborescence<String>>) null, linkedHashSet0, treeSet0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Edge<IfStmt> edge0 = new Edge<IfStmt>((IfStmt) null, (IfStmt) null);
      Arborescence<IfStmt> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<IfStmt>> weighted0 = new Weighted<Arborescence<IfStmt>>(arborescence0, 3519.525022);
      KBestArborescences.SubsetOfSolutions<IfStmt> kBestArborescences_SubsetOfSolutions0 = new KBestArborescences.SubsetOfSolutions<IfStmt>(edge0, weighted0, (Set<Edge<IfStmt>>) null, (Set<Edge<IfStmt>>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue<Weighted<Edge<String>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) priorityQueue0);
      HashSet<Edge<String>> hashSet0 = new HashSet<Edge<String>>();
      HashSet<Edge<String>> hashSet1 = new HashSet<Edge<String>>(881);
      Arborescence<String> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<String>> weighted0 = Weighted.weighted(arborescence0, (double) 881);
      Optional<Weighted<KBestArborescences.SubsetOfSolutions<String>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<String>) sparseWeightedGraph0, (Set<Edge<String>>) hashSet0, (Set<Edge<String>>) hashSet1, weighted0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Edge<Weighted<Double>> edge0 = (Edge<Weighted<Double>>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<Weighted<Double>> exclusiveEdge0 = ExclusiveEdge.of(edge0, 3314.5415391971);
      Arborescence<Weighted<Double>> arborescence0 = Arborescence.empty();
      // Undeclared exception!
      try { 
        KBestArborescences.seek(exclusiveEdge0, arborescence0, (EdgeQueueMap.EdgeQueue<Weighted<Double>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashSet<Edge<String>> hashSet0 = new HashSet<Edge<String>>();
      ImmutableSortedMap<String, String> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<String> arborescence0 = Arborescence.of((ImmutableMap<String, String>) immutableSortedMap0);
      Weighted<Arborescence<String>> weighted0 = new Weighted<Arborescence<String>>(arborescence0, 0.0);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<String>) null, (Set<Edge<String>>) hashSet0, (Set<Edge<String>>) hashSet0, weighted0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashSet<Edge<Object>> hashSet0 = new HashSet<Edge<Object>>();
      Edge<Object> edge0 = (Edge<Object>) mock(Edge.class, new ViolatedAssumptionAnswer());
      hashSet0.add(edge0);
      Arborescence<Object> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Object>> weighted0 = new Weighted<Arborescence<Object>>(arborescence0, 0.7);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Object>) null, (Set<Edge<Object>>) hashSet0, (Set<Edge<Object>>) hashSet0, weighted0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null key in entry: null=null
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[7][1];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) null);
      Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, 2850.3);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet0, (Set<Edge<Integer>>) linkedHashSet0, weighted0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.DenseWeightedGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) null, (Integer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.KBestArborescences", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Edge<EdgeQueueMap.EdgeQueue<String>> edge0 = (Edge<EdgeQueueMap.EdgeQueue<String>>) mock(Edge.class, new ViolatedAssumptionAnswer());
      ExclusiveEdge<EdgeQueueMap.EdgeQueue<String>> exclusiveEdge0 = ExclusiveEdge.of(edge0, (List<Edge<EdgeQueueMap.EdgeQueue<String>>>) null, 0.0);
      EdgeQueueMap.EdgeQueue<String> edgeQueueMap_EdgeQueue0 = (EdgeQueueMap.EdgeQueue<String>) mock(EdgeQueueMap.EdgeQueue.class, new ViolatedAssumptionAnswer());
      Stack<EdgeQueueMap.EdgeQueue<String>> stack0 = new Stack<EdgeQueueMap.EdgeQueue<String>>();
      Partition<EdgeQueueMap.EdgeQueue<String>> partition0 = Partition.singletons((Collection<EdgeQueueMap.EdgeQueue<String>>) stack0);
      EdgeQueueMap.EdgeQueue<EdgeQueueMap.EdgeQueue<String>> edgeQueueMap_EdgeQueue1 = EdgeQueueMap.EdgeQueue.create(edgeQueueMap_EdgeQueue0, partition0);
      Optional<ExclusiveEdge<EdgeQueueMap.EdgeQueue<String>>> optional0 = KBestArborescences.seek(exclusiveEdge0, (Arborescence<EdgeQueueMap.EdgeQueue<String>>) null, (EdgeQueueMap.EdgeQueue<EdgeQueueMap.EdgeQueue<String>>) edgeQueueMap_EdgeQueue1);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(4134.0);
      ImmutableBiMap<Double, Comparable<Double>> immutableBiMap0 = ImmutableBiMap.of(double0, (Comparable<Double>) double0);
      Set<Double> set0 = immutableBiMap0.keySet();
      ArrayList<Weighted<Edge<Double>>> arrayList0 = new ArrayList<Weighted<Edge<Double>>>();
      SparseWeightedGraph<Double> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Double>) set0, (Iterable<Weighted<Edge<Double>>>) arrayList0);
      List<Weighted<Arborescence<Double>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Double>) sparseWeightedGraph0, double0, 5127);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayDeque<Weighted<Double>> arrayDeque0 = new ArrayDeque<Weighted<Double>>(1);
      TreeSet<Weighted<Edge<Weighted<Double>>>> treeSet0 = new TreeSet<Weighted<Edge<Weighted<Double>>>>();
      SparseWeightedGraph<Weighted<Double>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Double>>) arrayDeque0, (Iterable<Weighted<Edge<Weighted<Double>>>>) treeSet0);
      Double double0 = new Double(1);
      Weighted<Double> weighted0 = new Weighted<Double>(double0, 1);
      List<Weighted<Arborescence<Weighted<Double>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Weighted<Double>>) sparseWeightedGraph0, weighted0, 1);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Weighted<Edge<Comparable<MethodDeclaration>>>> linkedList0 = new LinkedList<Weighted<Edge<Comparable<MethodDeclaration>>>>();
      SparseWeightedGraph<Comparable<MethodDeclaration>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Comparable<MethodDeclaration>>>>) linkedList0);
      Comparable<MethodDeclaration> comparable0 = (Comparable<MethodDeclaration>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      List<Weighted<Arborescence<Comparable<MethodDeclaration>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Comparable<MethodDeclaration>>) sparseWeightedGraph0, comparable0, 0);
      assertEquals(0, list0.size());
  }
  
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Weighted<Edge<Comparable<MethodDeclaration>>>> linkedList0 = new LinkedList<Weighted<Edge<Comparable<MethodDeclaration>>>>();
      SparseWeightedGraph<Comparable<MethodDeclaration>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Comparable<MethodDeclaration>>>>) linkedList0);
      Comparable<MethodDeclaration> comparable0 = (Comparable<MethodDeclaration>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      List<Weighted<Arborescence<Comparable<MethodDeclaration>>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Comparable<MethodDeclaration>>) sparseWeightedGraph0, comparable0, 0);
      assertEquals(0, list0.size());
  }
}
