/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 06:38:56 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.base.Optional;
import java.util.Comparator;
import java.util.function.Consumer;
import net.mooctest.FibonacciHeap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class FibonacciHeap_ESTest {

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      FibonacciHeap<FibonacciHeap<Object, Integer>, Object> fibonacciHeap2 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap1);
      assertEquals(0, fibonacciHeap2.size());
      assertNotSame(fibonacciHeap2, fibonacciHeap0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      FibonacciHeap<FibonacciHeap<Object, String>, Object> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super Object>) comparator1);
      fibonacciHeap1.add(fibonacciHeap0, "7tEru6$");
      Object object0 = new Object();
      fibonacciHeap1.add(fibonacciHeap0, object0);
      fibonacciHeap1.pollOption();
      assertEquals(1, fibonacciHeap1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, Object> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super Object>) comparator1);
      FibonacciHeap<Integer, Integer> fibonacciHeap2 = FibonacciHeap.create();
      fibonacciHeap2.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Integer) fibonacciHeap1.MAX_CAPACITY);
      int int0 = fibonacciHeap2.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.merge((FibonacciHeap<Integer, String>) null, (FibonacciHeap<Integer, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Integer, Integer> fibonacciHeap1 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
      // Undeclared exception!
      try { 
        FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Heaps that use different comparators can't be merged.
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Integer, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      // Undeclared exception!
      try { 
        fibonacciHeap0.add((Integer) fibonacciHeap0.MAX_CAPACITY, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Integer, Integer> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Integer>) comparator0);
      fibonacciHeap0.comparator();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, FibonacciHeap<String, Object>> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
      FibonacciHeap<Object, Integer> fibonacciHeap1 = FibonacciHeap.create();
      fibonacciHeap1.add(fibonacciHeap0, (Integer) Integer.MAX_VALUE);
      assertEquals(1, fibonacciHeap1.size());
      
      fibonacciHeap1.pollOption();
      assertEquals(0, fibonacciHeap1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      fibonacciHeap0.pollOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, FibonacciHeap<String, Object>> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertEquals(0, fibonacciHeap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      fibonacciHeap0.add(object0, object0);
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertEquals(1, fibonacciHeap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      fibonacciHeap0.add(object0, object0);
      fibonacciHeap0.iterator();
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fibonacciHeap0.add((Integer) Integer.MAX_VALUE, "XD&mp(&P@%uF,v1");
      fibonacciHeap0.forEach(consumer0);
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super String>) comparator0);
      int int0 = fibonacciHeap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<FibonacciHeap.Entry, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      fibonacciHeap0.peekOption();
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<FibonacciHeap.Entry, FibonacciHeap.Entry> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap.Entry>) comparator0);
      // Undeclared exception!
      try { 
        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.FibonacciHeap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<Object, Object> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super Object>) comparator0);
      Object object0 = new Object();
      fibonacciHeap0.add(object0, object0);
      FibonacciHeap<Object, Object> fibonacciHeap1 = FibonacciHeap.merge(fibonacciHeap0, fibonacciHeap0);
      fibonacciHeap1.pollOption();
      assertEquals(1, fibonacciHeap0.size());
      assertEquals(1, fibonacciHeap1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FibonacciHeap<String, FibonacciHeap<String, Object>> fibonacciHeap0 = FibonacciHeap.create((Comparator<? super FibonacciHeap<String, Object>>) comparator0);
      fibonacciHeap0.clear();
      assertEquals(0, fibonacciHeap0.size());
  }
}
