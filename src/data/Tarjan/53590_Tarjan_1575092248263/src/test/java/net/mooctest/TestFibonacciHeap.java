/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 30 13:01:31 CST 2019
 */

package net.mooctest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;

import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.common.base.Optional;
import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableBiMap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSortedMap;

public class TestFibonacciHeap{


  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FibonacciQueue<Integer> fibonacciQueue0 = FibonacciQueue.create();
      Integer integer0 = new Integer(0);
      fibonacciQueue0.add(integer0);
      Integer integer1 = fibonacciQueue0.poll();
      assertEquals(0, (int)integer1);
  }


  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciQueue.create((Comparator<? super FibonacciHeap.Entry>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      String string0 = fibonacciQueue0.peek();
      assertNull(string0);
  }



  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FibonacciQueue<String> fibonacciQueue0 = FibonacciQueue.create();
      Comparator<? super String> comparator0 = fibonacciQueue0.comparator();
      assertNotNull(comparator0);
  }
  
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.merge((FibonacciHeap<Integer, FibonacciHeap<Object, Object>>) null, (FibonacciHeap<Integer, FibonacciHeap<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FibonacciHeap<Object, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.decreasePriority((FibonacciHeap.Entry) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FibonacciHeap.create((Comparator<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FibonacciHeap<String, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.add((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
      boolean boolean0 = fibonacciHeap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, fibonacciHeap0.size());
  }


  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FibonacciHeap<Integer, String> fibonacciHeap0 = FibonacciHeap.create();
      // Undeclared exception!
      try { 
        fibonacciHeap0.remove((FibonacciHeap.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FibonacciHeap<Object, Integer> fibonacciHeap0 = FibonacciHeap.create();
      fibonacciHeap0.clear();
      assertEquals(0, fibonacciHeap0.size());
  }
  
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      ImmutableBiMap<Arborescence<String>, Arborescence<String>> immutableBiMap0 = ImmutableBiMap.of(arborescence0, arborescence0);
      Arborescence<Arborescence<String>> arborescence1 = Arborescence.of((ImmutableMap<Arborescence<String>, Arborescence<String>>) immutableBiMap0);
      arborescence1.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) null);
      // Undeclared exception!
      try { 
        arborescence0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Arborescence<Comparable<Comparable<Comparable>>> arborescence0 = Arborescence.empty();
      Arborescence<Object> arborescence1 = Arborescence.of((ImmutableMap<Object, Object>) null);
      // Undeclared exception!
      try { 
        arborescence1.equals(arborescence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      // Undeclared exception!
      try { 
        arborescence0.contains((Edge<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      ImmutableMap<Object, Object> immutableMap0 = ImmutableMap.of((Object) "", (Object) "", (Object) arborescence0, (Object) arborescence0);
      Arborescence<Object> arborescence1 = Arborescence.of(immutableMap0);
      Arborescence<AbstractMap.SimpleEntry<Object, Integer>> arborescence2 = Arborescence.empty();
      boolean boolean0 = arborescence2.equals(arborescence1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Arborescence<AbstractMap.SimpleEntry<Object, Integer>> arborescence0 = Arborescence.empty();
      Object object0 = new Object();
      boolean boolean0 = arborescence0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Arborescence<AbstractMap.SimpleImmutableEntry<String, String>> arborescence0 = Arborescence.empty();
      ImmutableMap<Object, Object> immutableMap0 = ImmutableMap.of();
      Arborescence<Object> arborescence1 = Arborescence.of(immutableMap0);
      boolean boolean0 = arborescence0.equals(arborescence1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      boolean boolean0 = arborescence0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      ImmutableMap<Object, Object> immutableMap0 = ImmutableMap.of((Object) "", (Object) "", (Object) arborescence0, (Object) arborescence0);
      Arborescence<Object> arborescence1 = Arborescence.of(immutableMap0);
      String string0 = arborescence1.toString();
      assertEquals("Arborescence{ -> , Arborescence{} -> Arborescence{}}", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      ImmutableSortedMap<Integer, Integer> immutableSortedMap0 = ImmutableSortedMap.of(integer0, integer1, integer1, integer0);
      Arborescence<Integer> arborescence0 = Arborescence.of((ImmutableMap<Integer, Integer>) immutableSortedMap0);
      Edge<Integer> edge0 = new Edge<Integer>(integer1, integer1);
      boolean boolean0 = arborescence0.contains(edge0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      ImmutableBiMap<Arborescence<String>, Arborescence<String>> immutableBiMap0 = ImmutableBiMap.of(arborescence0, arborescence0);
      Arborescence<Arborescence<String>> arborescence1 = Arborescence.of((ImmutableMap<Arborescence<String>, Arborescence<String>>) immutableBiMap0);
      Edge<Arborescence<String>> edge0 = new Edge<Arborescence<String>>(arborescence0, arborescence0);
      boolean boolean0 = arborescence1.contains(edge0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Arborescence<String> arborescence0 = Arborescence.empty();
      Edge<String> edge0 = new Edge<String>("", "");
      boolean boolean0 = arborescence0.contains(edge0);
      assertFalse(boolean0);
  }
  
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashSet<Edge<Comparable<Weighted<Edge<String>>>>> hashSet0 = new HashSet<Edge<Comparable<Weighted<Edge<String>>>>>();
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Comparable<Weighted<Edge<String>>>>) null, (Set<Edge<Comparable<Weighted<Edge<String>>>>>) hashSet0, (Set<Edge<Comparable<Weighted<Edge<String>>>>>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet0, (Set<Edge<Integer>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[6][1];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeSet<ExclusiveEdge<Object>> treeSet0 = new TreeSet<ExclusiveEdge<Object>>();
      Vector<Weighted<Edge<ExclusiveEdge<Object>>>> vector0 = new Vector<Weighted<Edge<ExclusiveEdge<Object>>>>(0, 0);
      SparseWeightedGraph<ExclusiveEdge<Object>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<ExclusiveEdge<Object>>) treeSet0, (Iterable<Weighted<Edge<ExclusiveEdge<Object>>>>) vector0);
      ChuLiuEdmonds.PartialSolution<ExclusiveEdge<Object>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<ExclusiveEdge<Object>>) sparseWeightedGraph0);
      Set<ExclusiveEdge<Object>> set0 = chuLiuEdmonds_PartialSolution0.getNodes();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Stack<Arborescence<String>> stack0 = new Stack<Arborescence<String>>();
      LinkedHashSet<Weighted<Edge<Arborescence<String>>>> linkedHashSet0 = new LinkedHashSet<Weighted<Edge<Arborescence<String>>>>();
      SparseWeightedGraph<Arborescence<String>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Arborescence<String>>) stack0, (Iterable<Weighted<Edge<Arborescence<String>>>>) linkedHashSet0);
      ChuLiuEdmonds.PartialSolution<Arborescence<String>> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Arborescence<String>>) sparseWeightedGraph0);
      Arborescence<String> arborescence0 = Arborescence.empty();
      Optional<ExclusiveEdge<Arborescence<String>>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge(arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PriorityQueue<Weighted<Edge<String>>> priorityQueue0 = new PriorityQueue<Weighted<Edge<String>>>((Comparator<? super Weighted<Edge<String>>>) null);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) priorityQueue0);
      ChuLiuEdmonds.PartialSolution<String> chuLiuEdmonds_PartialSolution0 = ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<String>) sparseWeightedGraph0);
      ImmutableSortedMap<String, String> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<String> arborescence0 = Arborescence.of((ImmutableMap<String, String>) immutableSortedMap0);
      Optional<ExclusiveEdge<String>> optional0 = chuLiuEdmonds_PartialSolution0.popBestEdge("", arborescence0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[][] doubleArray0 = new double[2][7];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = Integer.valueOf(2);
      Weighted<Arborescence<Integer>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Integer>) denseWeightedGraph0, integer0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[9][1];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.PartialSolution.initialize((WeightedGraph<Integer>) denseWeightedGraph0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      LinkedList<Weighted<Edge<Object>>> linkedList0 = new LinkedList<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) hashSet0, (Iterable<Weighted<Edge<Object>>>) linkedList0);
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Weighted<Arborescence<Object>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Object>) sparseWeightedGraph0, (Set<Edge<Object>>) linkedHashSet0, (Set<Edge<Object>>) linkedHashSet0);
      assertNotNull(weighted0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ChuLiuEdmonds chuLiuEdmonds0 = new ChuLiuEdmonds();
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      hashSet0.add(chuLiuEdmonds0);
      LinkedList<Weighted<Edge<Object>>> linkedList0 = new LinkedList<Weighted<Edge<Object>>>();
      SparseWeightedGraph<Object> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Object>) hashSet0, (Iterable<Weighted<Edge<Object>>>) linkedList0);
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Weighted<Arborescence<Object>> weighted0 = ChuLiuEdmonds.getMaxArborescence((WeightedGraph<Object>) sparseWeightedGraph0, (Set<Edge<Object>>) linkedHashSet0, (Set<Edge<Object>>) linkedHashSet0);
      assertNotNull(weighted0);
  }
  
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.getWeightOf(integer0, integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add("");
      double[][] doubleArray0 = new double[0][9];
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<String>) priorityQueue0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>(linkedHashSet0);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.908203125;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) linkedList0, doubleArray0);
      double double0 = denseWeightedGraph0.getWeightOf(locale_Category0, locale_Category0);
      assertEquals(0.908203125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>(linkedHashSet0);
      double[][] doubleArray0 = new double[1][3];
      linkedList0.toArray((Object[]) doubleArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) linkedList0, doubleArray0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.getWeightOf(locale_Category0, locale_Category0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.getIncomingEdges(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      Vector<Weighted<Object>> vector0 = new Vector<Weighted<Object>>(0);
      Weighted<Object> weighted0 = Weighted.weighted((Object) vector0, 0.0);
      vector0.add(weighted0);
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<Weighted<Object>>) vector0, doubleArray0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<Locale.Category>) arrayList0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<Integer>) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      Collection<Weighted<Edge<Integer>>> collection0 = denseWeightedGraph0.getIncomingEdges(integer0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      double[][] doubleArray0 = new double[0][2];
      DenseWeightedGraph<String> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<String>) arrayDeque0, doubleArray0);
      Collection<Weighted<Edge<String>>> collection0 = denseWeightedGraph0.getIncomingEdges("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<Locale.Category> linkedHashSet0 = new LinkedHashSet<Locale.Category>();
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>(linkedHashSet0);
      double[][] doubleArray0 = new double[1][3];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      linkedList0.add(locale_Category0);
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) linkedList0, doubleArray0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      double double0 = denseWeightedGraph0.getWeightOf(locale_Category0, locale_Category1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      double[][] doubleArray0 = new double[1][3];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      linkedList0.add(locale_Category0);
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) linkedList0, doubleArray0);
      double double0 = denseWeightedGraph0.getWeightOf(locale_Category0, locale_Category0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      double[][] doubleArray0 = new double[0][2];
      DenseWeightedGraph<String> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<String>) arrayDeque0, doubleArray0);
      double double0 = denseWeightedGraph0.getWeightOf("", "");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      // Undeclared exception!
      try { 
        DenseWeightedGraph.from((Iterable<String>) arrayDeque0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[0][2];
      Vector<Object> vector0 = new Vector<Object>(0, 0);
      DenseWeightedGraph<Object> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Object>) vector0, doubleArray0);
      Collection<Object> collection0 = denseWeightedGraph0.getNodes();
      assertFalse(collection0.contains(0));
  }
  
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Edge.from("d");
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer1);
      linkedHashSet0.add(edge0);
      Integer integer2 = new Integer(1);
      Edge<Integer> edge1 = new Edge<Integer>(integer2, integer2);
      linkedHashSet0.add(edge1);
      Integer integer3 = new Integer(4);
      linkedHashSet0.parallelStream();
      linkedHashSet0.remove((Object) null);
      Edge<Integer> edge2 = new Edge<Integer>(integer3, integer3);
      linkedHashSet0.add(edge2);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Integer>>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // duplicate key: 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Edge.isAutoCycle();
      Edge.isAutoCycle();
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Edge.EdgeBuilder<String> edge_EdgeBuilder0 = Edge.from((String) null);
      Edge<String> edge0 = edge_EdgeBuilder0.to("destination");
      String string0 = edge0.source;
      Edge<Object> edge1 = new Edge<Object>((Object) null, edge_EdgeBuilder0);
      linkedHashSet0.add(edge1);
      LinkedHashSet<Edge<String>> linkedHashSet1 = new LinkedHashSet<Edge<String>>();
      Edge.isIn((Set<Edge<String>>) linkedHashSet1);
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      Edge.isAutoCycle();
      Integer integer0 = new Integer(0);
      Edge.EdgeBuilder<Integer> edge_EdgeBuilder1 = Edge.from(integer0);
      Edge.hasDestination("CNrsl");
      Integer integer1 = new Integer(0);
      edge_EdgeBuilder1.to(integer1);
      edge1.hashCode();
      Edge.hasDestination("7.5oW+}#bb^+");
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      LinkedHashSet<Edge<String>> linkedHashSet2 = new LinkedHashSet<Edge<String>>();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet2);
      Edge.hasDestination("TL!nS8XSAk");
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null value in entry: net.mooctest.Edge$EdgeBuilder@8773a4e=null
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Set<Edge<Object>> set0 = null;
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>((String) null, (String) null);
      Edge.from("7wQ\"");
      edge0.equals((Object) null);
      Object object0 = new Object();
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from(object0);
      assertNotNull(edge_EdgeBuilder0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Predicate<Edge<Object>> predicate0 = Edge.competesWith((Set<Edge<Object>>) linkedHashSet0);
      assertNotNull(predicate0);
      
      Edge<Object> edge0 = new Edge<Object>(predicate0, predicate0);
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) linkedHashSet0);
      LinkedHashSet linkedHashSet1 = (LinkedHashSet)edge_EdgeBuilder0.source;
      linkedHashSet0.add(edge0);
      Edge<Object> edge1 = new Edge<Object>(predicate0, linkedHashSet1);
      LinkedHashSet<Edge<String>> linkedHashSet2 = new LinkedHashSet<Edge<String>>();
      Edge.competesWith((Set<Edge<String>>) linkedHashSet2);
      edge0.equals(edge1);
      linkedHashSet0.add(edge1);
      LinkedHashSet<Edge<Integer>> linkedHashSet3 = new LinkedHashSet<Edge<Integer>>();
      Integer integer0 = new Integer((-1118));
      Edge<Integer> edge2 = new Edge<Integer>(integer0, integer0);
      linkedHashSet3.add(edge2);
      Edge.isIn((Set<Edge<Integer>>) linkedHashSet3);
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      edge_EdgeBuilder0.to(edge0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(edge0.equals((Object)edge1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Edge.EdgeBuilder<String> edge_EdgeBuilder0 = Edge.from((String) null);
      assertNotNull(edge_EdgeBuilder0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("nw3]5l,V%!F*P9{", "W");
      String string0 = edge0.toString();
      assertEquals("Edge{source=nw3]5l,V%!F*P9{, destination=W}", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(694);
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) integer0);
      Edge.from(integer0);
      Edge<Object> edge0 = edge_EdgeBuilder0.to(integer0);
      edge0.toString();
      Edge.isAutoCycle();
      edge0.hashCode();
      Edge.isAutoCycle();
      LinkedHashSet<Edge<Edge<Object>>> linkedHashSet0 = new LinkedHashSet<Edge<Edge<Object>>>();
      linkedHashSet0.add((Edge<Edge<Object>>) null);
      // Undeclared exception!
      try { 
        Edge.competesWith((Set<Edge<Edge<Object>>>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("destination", "destination");
      Edge.isAutoCycle();
      edge0.toString();
      Edge.isAutoCycle();
      edge0.toString();
      Edge.hasDestination((Object) edge0);
      Integer integer0 = new Integer((-715));
      Edge<Integer> edge1 = new Edge<Integer>(integer0, integer0);
      edge1.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedHashSet<Edge<String>> linkedHashSet0 = new LinkedHashSet<Edge<String>>();
      Predicate<Edge<String>> predicate0 = Edge.competesWith((Set<Edge<String>>) linkedHashSet0);
      Integer integer0 = new Integer(1540);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer0);
      linkedHashSet0.add((Edge<String>) null);
      Edge<Object> edge1 = new Edge<Object>(predicate0, linkedHashSet0);
      edge0.equals(edge1);
      Predicate<Edge<Integer>> predicate1 = Edge.isAutoCycle();
      Integer integer1 = new Integer(1540);
      Predicate<Edge<Integer>> predicate2 = Edge.hasDestination(integer1);
      assertFalse(predicate2.equals((Object)predicate1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Predicate<Edge<Integer>> predicate0 = Edge.isAutoCycle();
      Edge.EdgeBuilder<Object> edge_EdgeBuilder0 = Edge.from((Object) predicate0);
      edge_EdgeBuilder0.to(predicate0);
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      Integer integer0 = new Integer(686);
      Edge.from(integer0);
      Edge<String> edge0 = new Edge<String>("source", "source");
      Integer integer1 = new Integer(686);
      Edge<Integer> edge1 = new Edge<Integer>(integer0, integer1);
      boolean boolean0 = edge0.equals(edge1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Edge.EdgeBuilder<String> edge_EdgeBuilder0 = Edge.from("/G");
      Edge<String> edge0 = edge_EdgeBuilder0.to("_!~");
      Edge.hasDestination((Object) edge_EdgeBuilder0);
      edge0.equals("$$aA-xem&\"M");
      Edge.EdgeBuilder<Object> edge_EdgeBuilder1 = Edge.from((Object) edge_EdgeBuilder0);
      Object object0 = new Object();
      Edge<Object> edge1 = new Edge<Object>("/G", object0);
      Edge<Object> edge2 = edge_EdgeBuilder1.to(edge1);
      edge0.hashCode();
      edge_EdgeBuilder0.to("_!~");
      Edge.hasDestination("_!~");
      Edge.EdgeBuilder<Edge<Object>> edge_EdgeBuilder2 = Edge.from(edge1);
      Edge<Object> edge3 = edge_EdgeBuilder2.source;
      Edge<String> edge4 = edge_EdgeBuilder0.to("");
      Edge<Object> edge5 = new Edge<Object>(edge4, edge2);
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Predicate<Edge<Integer>> predicate0 = Edge.competesWith((Set<Edge<Integer>>) linkedHashSet0);
      Edge.from((Object) edge5);
      edge1.equals(edge3);
      Edge.isAutoCycle();
      LinkedHashSet<Edge<Integer>> linkedHashSet1 = new LinkedHashSet<Edge<Integer>>(774);
      Predicate<Edge<Integer>> predicate1 = Edge.isIn((Set<Edge<Integer>>) linkedHashSet1);
      assertFalse(predicate1.equals((Object)predicate0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("A20=wuPIa+", "A20=wuPIa+");
      Integer integer0 = new Integer(2);
      Edge.from(integer0);
      Edge<Object> edge1 = new Edge<Object>("A20=wuPIa+", "A20=wuPIa+");
      edge1.toString();
      edge1.hashCode();
      Edge.hasDestination("A20=wuPIa+");
      Predicate<Edge<Object>> predicate0 = Edge.isAutoCycle();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(2450);
      Edge<Integer> edge0 = new Edge<Integer>(integer0, integer1);
      linkedHashSet0.add(edge0);
      Edge.isIn((Set<Edge<Integer>>) linkedHashSet0);
      Edge.hasDestination("5]3Rf-Xp");
      Edge.EdgeBuilder<String> edge_EdgeBuilder0 = Edge.from("5]3Rf-Xp");
      Edge<String> edge1 = edge_EdgeBuilder0.to("5]3Rf-Xp");
      String string0 = edge1.toString();
      assertEquals("Edge{source=5]3Rf-Xp, destination=5]3Rf-Xp}", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Edge<String> edge0 = new Edge<String>("I2/ODKPot1OH/w", "I2/ODKPot1OH/w");
      LinkedHashSet<Edge<Object>> linkedHashSet0 = new LinkedHashSet<Edge<Object>>();
      Edge.from("null value in entry: %s=null");
      Edge.isIn((Set<Edge<Object>>) linkedHashSet0);
      Edge.isAutoCycle();
      Integer integer0 = new Integer(2678);
      Edge.from((Object) integer0);
      Integer integer1 = new Integer((-194));
      Edge<Integer> edge1 = new Edge<Integer>(integer0, integer1);
      boolean boolean0 = edge1.equals((Object) null);
      assertFalse(boolean0);
  }
  
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Object object0 = new Object();
      Edge<Object> edge0 = new Edge<Object>(object0, object0);
      ExclusiveEdge<Object> exclusiveEdge0 = ExclusiveEdge.of(edge0, 0.0);
      // Undeclared exception!
      try { 
        exclusiveEdge0.compareTo((ExclusiveEdge<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
  
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashSet<Weighted<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>> hashSet0 = new HashSet<Weighted<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>>(0);
      SparseWeightedGraph<Comparable<EdgeQueueMap.EdgeQueue<Object>>> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>>) hashSet0);
      LinkedHashSet<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>> linkedHashSet0 = new LinkedHashSet<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>();
      ImmutableSortedMap<Comparable<EdgeQueueMap.EdgeQueue<Object>>, Comparable<EdgeQueueMap.EdgeQueue<Object>>> immutableSortedMap0 = ImmutableSortedMap.of();
      Arborescence<Comparable<EdgeQueueMap.EdgeQueue<Object>>> arborescence0 = Arborescence.of((ImmutableMap<Comparable<EdgeQueueMap.EdgeQueue<Object>>, Comparable<EdgeQueueMap.EdgeQueue<Object>>>) immutableSortedMap0);
      Weighted<Arborescence<Comparable<EdgeQueueMap.EdgeQueue<Object>>>> weighted0 = new Weighted<Arborescence<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>(arborescence0, 0.0);
      Optional<Weighted<KBestArborescences.SubsetOfSolutions<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>> optional0 = KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Comparable<EdgeQueueMap.EdgeQueue<Object>>>) sparseWeightedGraph0, (Set<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>) linkedHashSet0, (Set<Edge<Comparable<EdgeQueueMap.EdgeQueue<Object>>>>) linkedHashSet0, weighted0);
      assertNotNull(optional0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashSet<Edge<Integer>> hashSet0 = new HashSet<Edge<Integer>>();
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, 0.0);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) null, (Set<Edge<Integer>>) hashSet0, (Set<Edge<Integer>>) hashSet0, weighted0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      TreeSet<Edge<Integer>> treeSet0 = new TreeSet<Edge<Integer>>();
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, 0.0);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) treeSet0, (Set<Edge<Integer>>) treeSet0, weighted0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.mooctest.Edge cannot be cast to java.lang.Comparable
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double[][] doubleArray0 = new double[9][4];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      LinkedHashSet<Edge<Integer>> linkedHashSet0 = new LinkedHashSet<Edge<Integer>>();
      Arborescence<Integer> arborescence0 = Arborescence.empty();
      Weighted<Arborescence<Integer>> weighted0 = new Weighted<Arborescence<Integer>>(arborescence0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        KBestArborescences.scoreSubsetOfSolutions((WeightedGraph<Integer>) denseWeightedGraph0, (Set<Edge<Integer>>) linkedHashSet0, (Set<Edge<Integer>>) linkedHashSet0, weighted0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      Partition<String> partition0 = Partition.singletons((Collection<String>) arrayDeque0);
      EdgeQueueMap.EdgeQueue<String> edgeQueueMap_EdgeQueue0 = EdgeQueueMap.EdgeQueue.create("", partition0);
      // Undeclared exception!
      try { 
        KBestArborescences.getKBestArborescences((WeightedGraph<EdgeQueueMap.EdgeQueue<String>>) null, (EdgeQueueMap.EdgeQueue<String>) edgeQueueMap_EdgeQueue0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
      }
  }


  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-0.8093030778808594);
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-0.979070729071163);
      doubleArray1[1] = (-0.8093030778808594);
      doubleArray0[2] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer((-561));
      // Undeclared exception!
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double[][] doubleArray0 = new double[3][3];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 2);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = Integer.valueOf(0);
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 1);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      KBestArborescences kBestArborescences0 = new KBestArborescences();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = Integer.valueOf(0);
      List<Weighted<Arborescence<Integer>>> list0 = KBestArborescences.getKBestArborescences((WeightedGraph<Integer>) denseWeightedGraph0, integer0, 0);
      assertEquals(0, list0.size());
  }
  
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, String> pair0 = Pair.of(object0, "");
      Integer integer0 = new Integer(0);
      boolean boolean0 = pair0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, String> pair0 = Pair.of(object0, "");
      Pair<Object, Pair<Object, String>> pair1 = new Pair<Object, Pair<Object, String>>(object0, pair0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Object, Integer> pair0 = Pair.of((Object) integer0, integer0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, integer0);
      Pair<Integer, Integer> pair2 = new Pair<Integer, Integer>(integer0, integer0);
      Pair pair3 = (Pair)pair1.first;
      boolean boolean0 = pair2.equals(pair3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Object, Integer> pair0 = Pair.of((Object) integer0, integer0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, integer0);
      boolean boolean0 = pair1.equals(pair0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Pair<Object, Integer> pair0 = Pair.of((Object) integer0, integer0);
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0, integer0);
      pair1.hashCode();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object object0 = new Object();
      Pair<Object, String> pair0 = Pair.of(object0, "");
      Pair<Pair<Object, String>, Object> pair1 = Pair.of(pair0, (Object) "");
      String string0 = pair1.toString();
      assertNotNull(string0);
  }
  
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("e~.p");
      linkedList0.add("|K.!#Y8<fm`afX02os");
      linkedList0.push("");
      linkedList0.add("0Qr\"lF kn5'wD8&tG");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      partition0.merge("", "0Qr\"lF kn5'wD8&tG");
      partition0.merge("e~.p", "|K.!#Y8<fm`afX02os");
      String string0 = partition0.merge("0Qr\"lF kn5'wD8&tG", "e~.p");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("[n");
      linkedList0.add("");
      linkedList0.add("}qqsc{O0g3EI;");
      linkedList0.add("nKD_N\"gt*vE");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      partition0.merge("[n", "}qqsc{O0g3EI;");
      partition0.merge("", "nKD_N\"gt*vE");
      String string0 = partition0.merge("", "}qqsc{O0g3EI;");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("NvdR");
      linkedList0.add("nrD_\"kt*vzrE5}T");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "NvdR");
      assertEquals("", string0);
      
      String string1 = partition0.merge("nrD_\"kt*vzrE5}T", "NvdR");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("nrD_\"kt*vzrE5}T");
      linkedList0.add("jvG=");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("jvG=", "");
      assertEquals("jvG=", string0);
      
      String string1 = partition0.merge("", "nrD_\"kt*vzrE5}T");
      assertEquals("jvG=", string1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("nrD_\"kt*vzrE5}T");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "nrD_\"kt*vzrE5}T");
      assertEquals("", string0);
      
      String string1 = partition0.merge("nrD_\"kt*vzrE5}T", "nrD_\"kt*vzrE5}T");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        Partition.singletons((Collection<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Partition<Object> partition1 = Partition.singletons((Collection<Object>) linkedList1);
      // Undeclared exception!
      try { 
        partition1.sameComponent(integer0, partition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      Integer integer0 = Integer.getInteger("", 0);
      // Undeclared exception!
      try { 
        partition0.merge(integer0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Partition<Object> partition0 = Partition.singletons((Collection<Object>) linkedList0);
      // Undeclared exception!
      try { 
        partition0.componentOf((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("nrD_\"kt*vzrE5}T");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("nrD_\"kt*vzrE5}T", "");
      assertEquals("nrD_\"kt*vzrE5}T", string0);
      
      String string1 = partition0.componentOf("");
      assertEquals("nrD_\"kt*vzrE5}T", string1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      Integer integer1 = partition0.componentOf(integer0);
      assertTrue(linkedList0.contains(integer1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("d+ztDEgPGu`k>/Eg:YY");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("d+ztDEgPGu`k>/Eg:YY", "d+ztDEgPGu`k>/Eg:YY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("QvX OVk8J");
      linkedList0.add("d+ztDEgPGu`k>/Eg:YY");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      boolean boolean0 = partition0.sameComponent("d+ztDEgPGu`k>/Eg:YY", "QvX OVk8J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("nrD_\"kt*vzrE5}T");
      Partition<String> partition0 = Partition.singletons((Collection<String>) linkedList0);
      String string0 = partition0.merge("", "nrD_\"kt*vzrE5}T");
      assertEquals("", string0);
      
      String string1 = partition0.merge("nrD_\"kt*vzrE5}T", "");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Partition<Integer> partition0 = Partition.singletons((Collection<Integer>) linkedList0);
      Set<Integer> set0 = partition0.getNodes();
      assertTrue(set0.isEmpty());
  }
  
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>();
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) arrayDeque0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      double double0 = sparseWeightedGraph0.getWeightOf(integer0, integer1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ArrayList<Weighted<Edge<String>>> arrayList0 = new ArrayList<Weighted<Edge<String>>>(0);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<String>) linkedHashSet0, (Iterable<Weighted<Edge<String>>>) arrayList0);
      Collection<String> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Locale.FilteringMode>) null, (Iterable<Weighted<Edge<Locale.FilteringMode>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      ArrayDeque<Weighted<Edge<String>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<String>>>();
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<String>) linkedList0, (Iterable<Weighted<Edge<String>>>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashSet<Weighted<Edge<Object>>> hashSet0 = new HashSet<Weighted<Edge<Object>>>(0);
      Edge<Object> edge0 = new Edge<Object>(hashSet0, hashSet0);
      Weighted<Edge<Object>> weighted0 = new Weighted<Edge<Object>>(edge0, 0.0);
      hashSet0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Weighted<Edge<Integer>>> linkedList0 = new LinkedList<Weighted<Edge<Integer>>>();
      Edge<Integer> edge0 = new Edge<Integer>((Integer) null, (Integer) null);
      Weighted<Edge<Integer>> weighted0 = Weighted.weighted(edge0, 0.0);
      linkedList0.add(weighted0);
      // Undeclared exception!
      try { 
        SparseWeightedGraph.from((Iterable<Weighted<Edge<Integer>>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(0, 1);
      ArrayList<Weighted<Edge<Locale.FilteringMode>>> arrayList0 = new ArrayList<Weighted<Edge<Locale.FilteringMode>>>(0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Edge<Locale.FilteringMode> edge0 = new Edge<Locale.FilteringMode>(locale_FilteringMode0, locale_FilteringMode0);
      Weighted<Edge<Locale.FilteringMode>> weighted0 = new Weighted<Edge<Locale.FilteringMode>>(edge0, 0.0);
      arrayList0.add(weighted0);
      SparseWeightedGraph<Locale.FilteringMode> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Locale.FilteringMode>) hashSet0, (Iterable<Weighted<Edge<Locale.FilteringMode>>>) arrayList0);
      Collection<Weighted<Edge<Locale.FilteringMode>>> collection0 = sparseWeightedGraph0.getIncomingEdges(locale_FilteringMode0);
      assertTrue(collection0.contains(weighted0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(linkedList0);
      ArrayDeque<Weighted<Edge<Integer>>> arrayDeque0 = new ArrayDeque<Weighted<Edge<Integer>>>();
      SparseWeightedGraph<Integer> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Integer>) priorityQueue0, (Iterable<Weighted<Edge<Integer>>>) arrayDeque0);
      Integer integer0 = new Integer(0);
      Collection<Weighted<Edge<Integer>>> collection0 = sparseWeightedGraph0.getIncomingEdges(integer0);
      assertNotNull(collection0);
  }
  
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Weighted<String> weighted0 = new Weighted<String>("", 0.0);
      Weighted<String> weighted1 = Weighted.weighted("", (-0.87611474609375));
      int int0 = weighted1.compareTo(weighted0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = new Weighted<Integer>(integer0, 334);
      Weighted<Integer> weighted1 = Weighted.weighted(integer0, (double) 0);
      int int0 = weighted0.compareTo(weighted1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Weighted.weighted((Object) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = new Weighted<Integer>(integer0, 0);
      Weighted<Object> weighted1 = Weighted.weighted((Object) weighted0, 0.0);
      // Undeclared exception!
      try { 
        weighted1.compareTo((Weighted<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Weighted<String> weighted0 = null;
      try {
        weighted0 = new Weighted<String>((String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = Weighted.weighted(integer0, (double) 0);
      weighted0.hashCode();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = Weighted.weighted(integer0, (double) (-1));
      Weighted<Integer> weighted1 = new Weighted<Integer>(integer0, 0.0);
      boolean boolean0 = weighted0.equals(weighted1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = Weighted.weighted(integer0, (double) 0);
      boolean boolean0 = weighted0.equals(weighted0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = new Weighted<Integer>(integer0, 0);
      boolean boolean0 = weighted0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = new Weighted<Integer>(integer0, 0);
      Weighted<Object> weighted1 = Weighted.weighted((Object) weighted0, 0.0);
      boolean boolean0 = weighted0.equals(weighted1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Integer> weighted0 = new Weighted<Integer>(integer0, 0.0);
      String string0 = weighted0.toString();
      assertEquals("Weighted{val=0, weight=0.0}", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Weighted<Object> weighted0 = new Weighted<Object>(integer0, 0);
      Weighted<Weighted<Object>> weighted1 = Weighted.weighted(weighted0, (double) 0);
      int int0 = weighted1.compareTo(weighted1);
      assertEquals(0, int0);
  }
  
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      double double0 = denseWeightedGraph0.getWeightOf(integer0, integer0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category1, locale_Category1);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = 0.7656716243164062;
      doubleArray0[1] = doubleArray1;
      DenseWeightedGraph<Locale.Category> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Locale.Category>) enumSet0, doubleArray0);
      double double0 = denseWeightedGraph0.getWeightOf(locale_Category1, locale_Category1);
      assertEquals(0.7656716243164062, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[][] doubleArray0 = new double[0][1];
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      double double0 = denseWeightedGraph0.getWeightOf(integer0, integer0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashSet<Weighted<Edge<String>>> hashSet0 = new HashSet<Weighted<Edge<String>>>(0);
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) hashSet0);
      Collection<String> collection0 = sparseWeightedGraph0.getNodes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<Weighted<Edge<String>>> linkedList0 = new LinkedList<Weighted<Edge<String>>>();
      SparseWeightedGraph<String> sparseWeightedGraph0 = SparseWeightedGraph.from((Iterable<Weighted<Edge<String>>>) linkedList0);
      Collection<Weighted<Edge<String>>> collection0 = sparseWeightedGraph0.getIncomingEdges("");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[2] = doubleArray1;
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from(doubleArray0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.getIncomingEdges(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[0];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      hashSet0.add(locale_Category0);
      doubleArray0[0] = doubleArray1;
      DenseWeightedGraph<Object> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Object>) hashSet0, doubleArray0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.filterEdges((Predicate<Edge<Object>>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      DenseWeightedGraph<Integer> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Integer>) priorityQueue0, doubleArray0);
      WeightedGraph<Integer> weightedGraph0 = denseWeightedGraph0.filterEdges((Predicate<Edge<Integer>>) null);
      assertNotNull(weightedGraph0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(0);
      Integer integer0 = new Integer(0);
      hashSet0.add(integer0);
      double[][] doubleArray0 = new double[2][5];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      hashSet0.add(locale_Category0);
      DenseWeightedGraph<Object> denseWeightedGraph0 = DenseWeightedGraph.from((Iterable<Object>) hashSet0, doubleArray0);
      // Undeclared exception!
      try { 
        denseWeightedGraph0.filterEdges((Predicate<Edge<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
  

}
